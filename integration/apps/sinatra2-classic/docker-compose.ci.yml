version: '3.4'
services:
  app:
    # Build at dd-trace-rb level to copy in current code
    # and use it as the `datadog` gem.
    build:
      context: ../../..
      dockerfile: integration/apps/sinatra2-classic/Dockerfile-ci
      args:
        BASE_IMAGE: ${APP_IMAGE}
    environment:
      - BUNDLE_GEMFILE=/app/Gemfile
      - DD_AGENT_HOST=ddagent
      - DD_METRIC_AGENT_PORT=8125
      - DD_TRACE_AGENT_PORT=8126
      - DD_HEALTH_METRICS_ENABLED=true
      - DD_SERVICE=acme-sinatra2-classic
      - DD_PROFILING_ENABLED=true
      # Use these to choose what is run
      - DD_DEMO_ENV_PROCESS # needs to be specified, see README for available options
      - DD_DEMO_ENV_FEATURES=tracing,profiling
    expose:
      - "80"
    stdin_open: true
    tty: true

  # The agent is not relevant to the result of running integration test on CI.
  # Since the current integration test suite is mostly about sending a http request
  # to an app and verified the responsee and run a couple of self-owned test cases.

  # Build at dd-trace-rb level to copy in current code
  # and use it as the `datadog` gem.
  integration-tester:
    build:
      context: ../../..
      dockerfile: integration/apps/sinatra2-classic/Dockerfile-ci
      args:
        BASE_IMAGE: ${APP_IMAGE}
    command: bin/test
    depends_on:
      - app
    environment:
      - BUNDLE_GEMFILE=/app/Gemfile
      - TEST_HOSTNAME=app
      - TEST_PORT=80
      - TEST_INTEGRATION=true
      - HEALTH_CHECK_URL=http://app/health
      - HEALTH_CHECK_INTERVAL=1
      - HEALTH_CHECK_MAX_ATTEMPTS=30
    # volumes:
    #   - .:/app
    #   - ../../images/include:/vendor/dd-demo
    #   - ../../..:/vendor/dd-trace-rb
