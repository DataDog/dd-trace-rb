stages:
  - manual-images
  - package
  - deploy
  - macrobenchmarks
  - microbenchmarks

include:
  - remote: https://gitlab-templates.ddbuild.io/apm/packaging.yml
  - local: ".gitlab/benchmarks.yml"

# -----------------------------------------------------
# Reliability Environment configuration
# -----------------------------------------------------

variables:
  RUBY_PACKAGE_VERSION:
    description: "The version of the gem to build the rpm/deb package"
  DOWNSTREAM_BRANCH:
    value: "master"
    description: "Run a specific datadog-reliability-env branch downstream"
  RUBY_CUSTOM_IMAGE_BASE: $DOCKER_REGISTRY/ci/dd-trace-rb/custom_ruby

default:
  tags: [ "runner:main", "size:large" ]

.build-image-base:
  stage: manual-images
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
      changes:
        - .gitlab/Dockerfile-*
      when: manual
      allow_failure: true
  image: $DOCKER_REGISTRY/docker:20.10.13
  parallel:
    matrix:
      # ADD NEW RUBIES HERE
      - RUBY_VERSION: [ '3.2.2', '3.1.4', '3.0.6', '2.7.8' ]
  script:
    - >
      docker build
      --tag $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID
      --file .gitlab/Dockerfile-$RUBY_VERSION
      .
    - docker push --all-tags $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE

build-image-amd64:
   extends: .build-image-base
   tags: [ "runner:docker" ]
   variables:
     ARCHITECTURE: amd64

build-image-arm64:
   extends: .build-image-base
   tags: [ "runner:docker-arm", "platform:arm64"]
   variables:
     ARCHITECTURE: arm64

promote-image:
  stage: manual-images
  when: manual
  tags: [ "runner:docker" ]
  image: $DOCKER_REGISTRY/docker:20.10.13
  parallel:
    matrix:
      # ADD NEW RUBIES HERE
      - RUBY_VERSION: [ '3.2.2', '3.1.4', '3.0.6', '2.7.8' ]
        ARCHITECTURE: [ 'amd64', 'arm64' ]
  script:
    - docker pull $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID
    - docker tag $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:current
    - docker push $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:current

.install-base-ruby-gems:
  image: $RUBY_CUSTOM_IMAGE_BASE/3.2.2-$ARCHITECTURE:current
  needs:
    - check-gem-presence
  stage: package
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  script:
    # This would install all dependencies
    - .gitlab/prepare_pkg_directory.sh
    - ruby pkg/install_ddtrace_deps.rb debase-ruby_core_source libdatadog libddwaf datadog-ci msgpack ffi ddtrace
  artifacts:
    paths:
      - pkg

install-base-ruby-gems-amd64:
  extends: .install-base-ruby-gems
  image: $RUBY_CUSTOM_IMAGE_BASE/3.2.2-amd64:current
  tags: [ "runner:main" ]

install-base-ruby-gems-arm64:
  extends: .install-base-ruby-gems
  image: $RUBY_CUSTOM_IMAGE_BASE/3.2.2-arm64:current
  tags: [ "arch:arm64" ]

.install-version-dependant-gems:
  parallel:
    matrix:
      - RUBY_VERSION: ["2.7.8", "3.0.6", "3.1.4"]
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  stage: package
  script:
    - ruby pkg/install_ddtrace_deps.rb msgpack ffi ddtrace
  artifacts:
    paths:
      - pkg

install-version-dependant-gems-amd64:
  extends: .install-version-dependant-gems
  image: $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-amd64:current
  tags: [ "runner:main" ]
  needs:
    - check-gem-presence
    - install-base-ruby-gems-amd64

install-version-dependant-gems-arm64:
  extends: .install-version-dependant-gems
  image: $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-arm64:current
  tags: [ "arch:arm64" ]
  needs:
    - check-gem-presence
    - install-base-ruby-gems-arm64

check-gem-presence:
  image: $RUBY_CUSTOM_IMAGE_BASE/3.2.2-amd64:current
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  stage: package
  script:
    -  .gitlab/check_gem_presence.sh

package:
  extends: .package
  needs:
    - check-gem-presence
    - install-version-dependant-gems-amd64
    - install-base-ruby-gems-amd64
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  script:
    - ls ../pkg
    - ../.gitlab/build-deb-rpm.sh

package-arm:
  extends: .package-arm
  needs:
    - check-gem-presence
    - install-version-dependant-gems-arm64
    - install-base-ruby-gems-arm64
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  script:
    - ls ../pkg
    - ../.gitlab/build-deb-rpm.sh

.release-package:
  stage: deploy
  variables:
    PRODUCT_NAME: auto_inject-ruby

deploy_to_reliability_env:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/apm-reliability/datadog-reliability-env
    branch: $DOWNSTREAM_BRANCH
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA

deploy_to_docker_registries:
  stage: deploy
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: delayed
      start_in: 1 day
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: ghcr.io/datadog/dd-trace-rb/dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_DESTINATIONS: dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_SIGNING: "false"

deploy_latest_tag_to_docker_registries:
  stage: deploy
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: delayed
      start_in: 1 day
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: ghcr.io/datadog/dd-trace-rb/dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_DESTINATIONS: dd-lib-ruby-init:latest
    IMG_SIGNING: "false"
