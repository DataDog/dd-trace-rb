stages:
  - manual-images
  - package
  - shared-pipeline
  - vaccine
  - macrobenchmarks
  - microbenchmarks
  - benchmarks

include:
  - project: DataDog/apm-reliability/libdatadog-build
    ref: 0f677257308e1c379af490b754febfb40fa2c06d
    file: templates/one-pipeline.yml
  - local: ".gitlab/benchmarks.yml"

variables:
  RUBY_CUSTOM_IMAGE_BASE: $DOCKER_REGISTRY/ci/dd-trace-rb/custom_ruby
  REPO_LANG: ruby # ruby is used rather that "rb"
  BUILD_JOB_NAME: save_versions
  REPO_NOTIFICATION_CHANNEL: "#guild-dd-ruby"

default:
  tags: ["runner:main", "size:large"]

.build-image-base:
  stage: manual-images
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
      changes:
        - .gitlab/Dockerfile-*   # these are direct dependencies
        - .gitlab-ci.yml         # list of images is here so it is a dependency too
      allow_failure: true
  image: $DOCKER_REGISTRY/docker:20.10.13
  parallel:
    matrix:
      # ADD NEW RUBIES HERE
      - RUBY_VERSION: ["3.4", "3.3", "3.2", "3.1", "3.0", "2.7"]
  script:
    - >
      docker build
      --tag $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID
      --file .gitlab/Dockerfile-$RUBY_VERSION
      .
    - docker push --all-tags $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE

build-image-amd64:
  extends: .build-image-base
  tags: ["runner:docker"]
  variables:
    ARCHITECTURE: amd64

build-image-arm64:
  extends: .build-image-base
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCHITECTURE: arm64

promote-image:
  stage: manual-images
  rules:                         # same as build-image
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
      changes:
        - .gitlab/Dockerfile-*   # these are direct dependencies
        - .gitlab-ci.yml         # list of images is here so it is a dependency too
      when: manual               # this one is manual, but it means that install-dependencies may be hitting the wrong <base>:current til this is run
      allow_failure: true
  tags: ["runner:docker"]
  image: $DOCKER_REGISTRY/docker:20.10.13
  parallel:
    matrix:
      # ADD NEW RUBIES HERE
      - RUBY_VERSION: ["3.4", "3.3", "3.2", "3.1", "3.0", "2.7"]
        ARCHITECTURE: ["amd64", "arm64"]
  script:
    - docker pull $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID
    - docker tag $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:$CI_PIPELINE_ID $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:current
    - docker push $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCHITECTURE:current

build-gem:
  image: $DOCKER_REGISTRY/images/mirror/ruby:3.2.2
  stage: package
  script:
    - mkdir -p pkg tmp
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        .gitlab/check_gem_presence.sh
        VERSION=${CI_COMMIT_TAG#v}
        gem fetch datadog --version $VERSION
        mv datadog-*.gem pkg/
        echo $VERSION > tmp/version
      else
        echo CI_JOB_ID=$CI_JOB_ID
        echo CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
        echo CI_COMMIT_SHA=$CI_COMMIT_SHA
        .gitlab/patch_gem_version.sh glci $CI_JOB_ID $CI_COMMIT_REF_NAME $CI_COMMIT_SHA
        bundle install && chmod go-w -R . && bundle exec rake build
        ruby -Ilib -rdatadog/version -e 'puts Gem::Version.new(Datadog::VERSION::STRING).to_s' >> tmp/version
      fi
  artifacts:
    paths:
      - pkg
      - tmp
      - lib/datadog/version.rb

install-dependencies:
  image: $RUBY_CUSTOM_IMAGE_BASE/$RUBY_VERSION-$ARCH:current
  tags: ["arch:$ARCH"]
  parallel:
    matrix:
      # Promote again when adding 3.4 support
      - RUBY_VERSION: ["3.3", "3.2", "3.1", "3.0", "2.7"]
        ARCH: ["amd64", "arm64"]
  stage: package
  needs:
    - build-gem
  script:
    - export RUBY_PACKAGE_VERSION=$(cat tmp/version)
    - export DATADOG_GEM_LOCATION=$(readlink -f pkg/datadog-*.gem)
    - ruby -v
    - gem -v
    - bundler -v
    - ruby .gitlab/install_datadog_deps.rb
  artifacts:
    paths:
      - pkg
      - tmp/$ARCH
      - lib/datadog/version.rb

package-oci:
  needs:
    - build-gem
    - install-dependencies

requirements_json_test:
  rules:
    - when: on_success
  variables:
    REQUIREMENTS_BLOCK_JSON_PATH: "lib-injection/test_block.json"
    REQUIREMENTS_ALLOW_JSON_PATH: "lib-injection/test_allow.json"

configure_system_tests:
  variables:
    SYSTEM_TESTS_SCENARIOS_GROUPS: "simple_onboarding,lib-injection"

save_versions:
  image: $DOCKER_REGISTRY/images/mirror/ruby:3.2.2
  stage: package
  needs: []
  script:
    - git fetch --all
    - echo COMMIT_SHA_1X=$(git rev-parse origin/1.x-stable) >> upstream.env
    - echo COMMIT_SHA_2X=$(git rev-parse origin/master) >> upstream.env
  artifacts:
    paths:
      - upstream.env

deploy_to_reliability_env:
  needs:
    - save_versions

# Currently, the job is implemented with polling mechanism.
#
# Due to the constraints of Github workflow dispatch endpoint, it does not return the workflow run id.
# https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event
#
# We fetch the latest workflow runs from vaccine then match against the run name, polling until we find it.
vaccine:
  image: $DOCKER_REGISTRY/docker:20.10.13
  tags: ["arch:amd64"]
  stage: vaccine
  needs: [create-multiarch-lib-injection-image]
  script: |
    .gitlab/scripts/vaccine.sh master "${CI_COMMIT_SHA}" "glci:${CI_PIPELINE_ID}"
