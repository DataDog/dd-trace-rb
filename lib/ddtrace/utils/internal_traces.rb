module Datadog
  module Utils
    # Traces generated by the client internals
    module InternalTraces
      def self.included(klass)
        klass.extend(ClassMethods)
      end

      # ClassMethods
      module ClassMethods
        def internal_trace_service(service_name)
          class_eval <<-EOF
          def internal_trace_service
            "#{service_name}"
          end
          EOF
        end
      end

      def internal_trace_service
        'datadog.unknown'
      end

      def internal_span(name, *args)
        return yield unless Datadog.tracer.internal_traces

        Datadog.tracer.trace(name, *args) do |span|
          span.set_tag('datadog.internal', true)
          span.service = internal_trace_service
          yield
        end
      end

      def internal_span_when(condition, name, *args, &block)
        return yield unless Datadog.tracer.internal_traces

        condition = condition.call if condition.respond_to?(:send)
        return yield unless condition

        internal_span(name, *args, &block)
      end

      def internal_span_ensure_parent(name, *args, &block)
        return yield unless Datadog.tracer.internal_traces

        internal_span_when(-> { Datadog.tracer.active_span }, name, *args, &block)
      end

      def with_active_internal_span
        return unless Datadog.tracer.internal_traces

        span = Datadog.tracer.active_span
        yield(span) if span
      end
    end
  end
end
