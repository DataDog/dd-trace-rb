module Datadog
  module AppSec
    # rubocop:disable Metrics/ModuleLength
    module WAF
      type known_addresses = ::Array[::String]
      type diagnostics = ::Hash[::String, untyped]
      type input = nil | bool | ::String | ::Symbol | ::Integer | ::Float | ::Array[input] | ::Hash[input, input]
      type output = nil | bool | ::String | ::Integer | ::Float | ::Array[output] | ::Hash[::String, output]

      # retain logging proc if set properly
      self.@log_callback: untyped

      self.@logger: untyped

      def self.version: () -> untyped

      # rubocop:disable Metrics/MethodLength,Metrics/CyclomaticComplexity,Metrics/PerceivedComplexity
      def self.ruby_to_object: (untyped val, ?max_container_size: untyped?, ?max_container_depth: untyped?, ?max_string_length: untyped?, ?coerce: bool) -> untyped

      def self.object_to_ruby: (untyped obj) -> untyped

      def self.log_callback: (untyped level, untyped func, untyped file, untyped line, untyped message, untyped len) -> (nil | untyped)

      def self.logger: () -> untyped

      def self.logger=: (untyped logger) -> untyped

      RESULT_CODE: { ddwaf_err_internal: :err_internal, ddwaf_err_invalid_object: :err_invalid_object, ddwaf_err_invalid_argument: :err_invalid_argument, ddwaf_ok: :ok, ddwaf_match: :match }

      module LibDDWAF
        class Object
        end

        DDWAF_RUN_TIMEOUT: untyped
      end

      class Error < StandardError
      end

      class InstanceFinalizedError < Error
      end

      class ConversionError < Error
      end

      class LibDDWAFError < Error
        attr_reader diagnostics: untyped

        def initialize: (::String msg, ?diagnostics: untyped?) -> void
      end

      class HandleBuilder
        @builder_ptr: ::FFI::Pointer

        def initialize: (?limits: ::Hash[::Symbol, ::Integer], ?obfuscator: ::Hash[::Symbol, ::String]) -> void

        def finalize!: () -> void

        def build_handle: () -> Handle

        def add_or_update_config: (untyped config, path: ::String) -> untyped

        def remove_config_at_path: (::String path) -> bool

        private

        def ensure_pointer_presence!: () -> void
      end

      class Handle
        @handle_ptr: ::FFI::Pointer

        def initialize: (::FFI::Pointer handle_ptr) -> void

        def finalize!: () -> void

        def build_context: () -> Context

        def known_addresses: () -> WAF::known_addresses

        private

        def ensure_pointer_presence!: () -> void
      end

      class Result
        type list = ::Array[WAF::output]
        type map = ::Hash[::String, WAF::output]

        @status: ::Symbol

        @events: list

        @actions: map

        @attributes: map

        @duration: ::Integer

        @timeout: bool

        @keep: bool

        @input_truncated: bool

        attr_reader status: ::Symbol

        attr_reader events: list

        attr_reader actions: map

        attr_reader attributes: map

        attr_reader duration: ::Integer

        def initialize: (
          status: ::Symbol,
          events: list,
          actions: map,
          attributes: map,
          duration: ::Integer,
          timeout: bool,
          keep: bool
        ) -> void

        def mark_input_truncated!: () -> bool

        def timeout?: () -> bool

        def keep?: () -> bool

        def input_truncated?: () -> bool

        def to_h: () -> ::Hash[::Symbol, (::Symbol | WAF::output)]
      end

      class Context
        @context_ptr: ::FFI::Pointer

        @retained: Array[top]

        RESULT_CODE: ::Hash[::Symbol, ::Symbol]

        def initialize: (::FFI::Pointer context_ptr) -> void

        def finalize!: () -> void

        def run: (WAF::input persistent_data, WAF::input ephemeral_data, ?::Integer timeout) -> Result

        private

        def ensure_pointer_presence!: () -> void

        def retained: () -> Array[top]

        def retain: (top object) -> void

        def release: (top object) -> void
      end
    end
  end
end
