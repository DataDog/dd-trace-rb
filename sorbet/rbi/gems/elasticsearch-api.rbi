# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/elasticsearch-api/all/elasticsearch-api.rbi
#
# elasticsearch-api-8.1.2

module Elasticsearch
end
module Elasticsearch::API
  def self.included(base); end
  def self.serializer; end
  def self.settings; end
end
module Elasticsearch::API::Common
end
module Elasticsearch::API::Common::Actions
end
module Elasticsearch::API::Common::Client
  def perform_request(method, path, params = nil, body = nil, headers = nil); end
end
module Elasticsearch::API::Common::Client::Base
  def client; end
  def initialize(client); end
end
module Elasticsearch::API::Utils
  def __bulkify(payload); end
  def __escape(string); end
  def __extract_parts(arguments, valid_parts = nil); end
  def __listify(*list); end
  def __pathify(*segments); end
  def __report_unsupported_method(name); end
  def __report_unsupported_parameters(arguments, params = nil); end
  def __rescue_from_not_found(&block); end
  def process_params(arguments); end
  extend Elasticsearch::API::Utils
end
class Elasticsearch::API::Response
  def initialize(response); end
  def method_missing(method, *args, &block); end
  def respond_to_missing?(method_name, include_private = nil); end
  def to_s; end
end
module Elasticsearch::API::Actions
  def bulk(arguments = nil); end
  def clear_scroll(arguments = nil); end
  def close_point_in_time(arguments = nil); end
  def count(arguments = nil); end
  def create(arguments = nil); end
  def delete(arguments = nil); end
  def delete_by_query(arguments = nil); end
  def delete_by_query_rethrottle(arguments = nil); end
  def delete_script(arguments = nil); end
  def exists(arguments = nil); end
  def exists?(arguments = nil); end
  def exists_source(arguments = nil); end
  def exists_source?(arguments = nil); end
  def explain(arguments = nil); end
  def field_caps(arguments = nil); end
  def get(arguments = nil); end
  def get_script(arguments = nil); end
  def get_script_context(arguments = nil); end
  def get_script_languages(arguments = nil); end
  def get_source(arguments = nil); end
  def index(arguments = nil); end
  def info(arguments = nil); end
  def knn_search(arguments = nil); end
  def mget(arguments = nil); end
  def msearch(arguments = nil); end
  def msearch_template(arguments = nil); end
  def mtermvectors(arguments = nil); end
  def open_point_in_time(arguments = nil); end
  def ping(arguments = nil); end
  def put_script(arguments = nil); end
  def rank_eval(arguments = nil); end
  def reindex(arguments = nil); end
  def reindex_rethrottle(arguments = nil); end
  def render_search_template(arguments = nil); end
  def scripts_painless_execute(arguments = nil); end
  def scroll(arguments = nil); end
  def search(arguments = nil); end
  def search_mvt(arguments = nil); end
  def search_shards(arguments = nil); end
  def search_template(arguments = nil); end
  def terms_enum(arguments = nil); end
  def termvector(arguments = nil); end
  def termvectors(arguments = nil); end
  def update(arguments = nil); end
  def update_by_query(arguments = nil); end
  def update_by_query_rethrottle(arguments = nil); end
end
module Elasticsearch::API::XPack
  def xpack; end
end
module Elasticsearch::API::XPack::Actions
  def info(arguments = nil); end
  def usage(arguments = nil); end
end
module Elasticsearch::API::Cat
  def cat; end
end
module Elasticsearch::API::Cat::Actions
  def aliases(arguments = nil); end
  def allocation(arguments = nil); end
  def count(arguments = nil); end
  def fielddata(arguments = nil); end
  def health(arguments = nil); end
  def help(arguments = nil); end
  def indices(arguments = nil); end
  def master(arguments = nil); end
  def ml_data_frame_analytics(arguments = nil); end
  def ml_datafeeds(arguments = nil); end
  def ml_jobs(arguments = nil); end
  def ml_trained_models(arguments = nil); end
  def nodeattrs(arguments = nil); end
  def nodes(arguments = nil); end
  def pending_tasks(arguments = nil); end
  def plugins(arguments = nil); end
  def recovery(arguments = nil); end
  def repositories(arguments = nil); end
  def segments(arguments = nil); end
  def shards(arguments = nil); end
  def snapshots(arguments = nil); end
  def tasks(arguments = nil); end
  def templates(arguments = nil); end
  def thread_pool(arguments = nil); end
  def transforms(arguments = nil); end
end
module Elasticsearch::API::DataFrameTransformDeprecated
  def data_frame_transform_deprecated; end
end
module Elasticsearch::API::DataFrameTransformDeprecated::Actions
  def delete_transform(arguments = nil); end
  def get_transform(arguments = nil); end
  def get_transform_stats(arguments = nil); end
  def preview_transform(arguments = nil); end
  def put_transform(arguments = nil); end
  def start_transform(arguments = nil); end
  def stop_transform(arguments = nil); end
  def update_transform(arguments = nil); end
end
module Elasticsearch::API::SearchableSnapshots
  def searchable_snapshots; end
end
module Elasticsearch::API::SearchableSnapshots::Actions
  def cache_stats(arguments = nil); end
  def clear_cache(arguments = nil); end
  def mount(arguments = nil); end
  def stats(arguments = nil); end
end
module Elasticsearch::API::Snapshot
  def snapshot; end
end
module Elasticsearch::API::Snapshot::Actions
  def cleanup_repository(arguments = nil); end
  def clone(arguments = nil); end
  def create(arguments = nil); end
  def create_repository(arguments = nil); end
  def delete(arguments = nil); end
  def delete_repository(arguments = nil); end
  def get(arguments = nil); end
  def get_repository(arguments = nil); end
  def repository_analyze(arguments = nil); end
  def restore(arguments = nil); end
  def status(arguments = nil); end
  def verify_repository(arguments = nil); end
end
module Elasticsearch::API::Cluster
  def cluster; end
end
module Elasticsearch::API::Cluster::Actions
  def allocation_explain(arguments = nil); end
  def delete_component_template(arguments = nil); end
  def delete_voting_config_exclusions(arguments = nil); end
  def exists_component_template(arguments = nil); end
  def exists_component_template?(arguments = nil); end
  def get_component_template(arguments = nil); end
  def get_settings(arguments = nil); end
  def health(arguments = nil); end
  def pending_tasks(arguments = nil); end
  def post_voting_config_exclusions(arguments = nil); end
  def put_component_template(arguments = nil); end
  def put_settings(arguments = nil); end
  def remote_info(arguments = nil); end
  def reroute(arguments = nil); end
  def state(arguments = nil); end
  def stats(arguments = nil); end
end
module Elasticsearch::API::SSL
  def ssl; end
end
module Elasticsearch::API::SSL::Actions
  def certificates(arguments = nil); end
end
module Elasticsearch::API::Tasks
  def tasks; end
end
module Elasticsearch::API::Tasks::Actions
  def cancel(arguments = nil); end
  def get(arguments = nil); end
  def list(arguments = nil); end
end
module Elasticsearch::API::Indices
  def indices; end
end
module Elasticsearch::API::Indices::Actions
  def add_block(arguments = nil); end
  def analyze(arguments = nil); end
  def clear_cache(arguments = nil); end
  def clone(arguments = nil); end
  def close(arguments = nil); end
  def create(arguments = nil); end
  def create_data_stream(arguments = nil); end
  def data_streams_stats(arguments = nil); end
  def delete(arguments = nil); end
  def delete_alias(arguments = nil); end
  def delete_data_stream(arguments = nil); end
  def delete_index_template(arguments = nil); end
  def delete_template(arguments = nil); end
  def disk_usage(arguments = nil); end
  def exists(arguments = nil); end
  def exists?(arguments = nil); end
  def exists_alias(arguments = nil); end
  def exists_alias?(arguments = nil); end
  def exists_index_template(arguments = nil); end
  def exists_index_template?(arguments = nil); end
  def exists_template(arguments = nil); end
  def exists_template?(arguments = nil); end
  def exists_type(arguments = nil); end
  def exists_type?(arguments = nil); end
  def field_usage_stats(arguments = nil); end
  def flush(arguments = nil); end
  def forcemerge(arguments = nil); end
  def get(arguments = nil); end
  def get_alias(arguments = nil); end
  def get_data_stream(arguments = nil); end
  def get_field_mapping(arguments = nil); end
  def get_index_template(arguments = nil); end
  def get_mapping(arguments = nil); end
  def get_settings(arguments = nil); end
  def get_template(arguments = nil); end
  def migrate_to_data_stream(arguments = nil); end
  def modify_data_stream(arguments = nil); end
  def open(arguments = nil); end
  def promote_data_stream(arguments = nil); end
  def put_alias(arguments = nil); end
  def put_index_template(arguments = nil); end
  def put_mapping(arguments = nil); end
  def put_settings(arguments = nil); end
  def put_template(arguments = nil); end
  def recovery(arguments = nil); end
  def refresh(arguments = nil); end
  def reload_search_analyzers(arguments = nil); end
  def resolve_index(arguments = nil); end
  def rollover(arguments = nil); end
  def segments(arguments = nil); end
  def shard_stores(arguments = nil); end
  def shrink(arguments = nil); end
  def simulate_index_template(arguments = nil); end
  def simulate_template(arguments = nil); end
  def split(arguments = nil); end
  def stats(arguments = nil); end
  def unfreeze(arguments = nil); end
  def update_aliases(arguments = nil); end
  def validate_query(arguments = nil); end
end
module Elasticsearch::API::Shutdown
  def shutdown; end
end
module Elasticsearch::API::Shutdown::Actions
  def delete_node(arguments = nil); end
  def get_node(arguments = nil); end
  def put_node(arguments = nil); end
end
module Elasticsearch::API::Watcher
  def watcher; end
end
module Elasticsearch::API::Watcher::Actions
  def ack_watch(arguments = nil); end
  def activate_watch(arguments = nil); end
  def deactivate_watch(arguments = nil); end
  def delete_watch(arguments = nil); end
  def execute_watch(arguments = nil); end
  def get_watch(arguments = nil); end
  def put_watch(arguments = nil); end
  def query_watches(arguments = nil); end
  def start(arguments = nil); end
  def stats(arguments = nil); end
  def stop(arguments = nil); end
end
module Elasticsearch::API::License
  def license; end
end
module Elasticsearch::API::License::Actions
  def delete(arguments = nil); end
  def get(arguments = nil); end
  def get_basic_status(arguments = nil); end
  def get_trial_status(arguments = nil); end
  def post(arguments = nil); end
  def post_start_basic(arguments = nil); end
  def post_start_trial(arguments = nil); end
end
module Elasticsearch::API::Logstash
  def logstash; end
end
module Elasticsearch::API::Logstash::Actions
  def delete_pipeline(arguments = nil); end
  def get_pipeline(arguments = nil); end
  def put_pipeline(arguments = nil); end
end
module Elasticsearch::API::Security
  def security; end
end
module Elasticsearch::API::Security::Actions
  def authenticate(arguments = nil); end
  def change_password(arguments = nil); end
  def clear_api_key_cache(arguments = nil); end
  def clear_cached_privileges(arguments = nil); end
  def clear_cached_realms(arguments = nil); end
  def clear_cached_roles(arguments = nil); end
  def clear_cached_service_tokens(arguments = nil); end
  def create_api_key(arguments = nil); end
  def create_service_token(arguments = nil); end
  def delete_privileges(arguments = nil); end
  def delete_role(arguments = nil); end
  def delete_role_mapping(arguments = nil); end
  def delete_service_token(arguments = nil); end
  def delete_user(arguments = nil); end
  def disable_user(arguments = nil); end
  def enable_user(arguments = nil); end
  def enroll_kibana(arguments = nil); end
  def enroll_node(arguments = nil); end
  def get_api_key(arguments = nil); end
  def get_builtin_privileges(arguments = nil); end
  def get_privileges(arguments = nil); end
  def get_role(arguments = nil); end
  def get_role_mapping(arguments = nil); end
  def get_service_accounts(arguments = nil); end
  def get_service_credentials(arguments = nil); end
  def get_token(arguments = nil); end
  def get_user(arguments = nil); end
  def get_user_privileges(arguments = nil); end
  def grant_api_key(arguments = nil); end
  def has_privileges(arguments = nil); end
  def invalidate_api_key(arguments = nil); end
  def invalidate_token(arguments = nil); end
  def oidc_authenticate(arguments = nil); end
  def oidc_logout(arguments = nil); end
  def oidc_prepare_authentication(arguments = nil); end
  def put_privileges(arguments = nil); end
  def put_role(arguments = nil); end
  def put_role_mapping(arguments = nil); end
  def put_user(arguments = nil); end
  def query_api_keys(arguments = nil); end
  def saml_authenticate(arguments = nil); end
  def saml_complete_logout(arguments = nil); end
  def saml_invalidate(arguments = nil); end
  def saml_logout(arguments = nil); end
  def saml_prepare_authentication(arguments = nil); end
  def saml_service_provider_metadata(arguments = nil); end
end
module Elasticsearch::API::Nodes
  def nodes; end
end
module Elasticsearch::API::Nodes::Actions
  def clear_repositories_metering_archive(arguments = nil); end
  def get_repositories_metering_info(arguments = nil); end
  def hot_threads(arguments = nil); end
  def info(arguments = nil); end
  def reload_secure_settings(arguments = nil); end
  def stats(arguments = nil); end
  def usage(arguments = nil); end
end
module Elasticsearch::API::MachineLearning
  def machine_learning; end
  def ml; end
end
module Elasticsearch::API::MachineLearning::Actions
  def close_job(arguments = nil); end
  def delete_calendar(arguments = nil); end
  def delete_calendar_event(arguments = nil); end
  def delete_calendar_job(arguments = nil); end
  def delete_data_frame_analytics(arguments = nil); end
  def delete_datafeed(arguments = nil); end
  def delete_expired_data(arguments = nil); end
  def delete_filter(arguments = nil); end
  def delete_forecast(arguments = nil); end
  def delete_job(arguments = nil); end
  def delete_model_snapshot(arguments = nil); end
  def delete_trained_model(arguments = nil); end
  def delete_trained_model_alias(arguments = nil); end
  def estimate_model_memory(arguments = nil); end
  def evaluate_data_frame(arguments = nil); end
  def explain_data_frame_analytics(arguments = nil); end
  def flush_job(arguments = nil); end
  def forecast(arguments = nil); end
  def get_buckets(arguments = nil); end
  def get_calendar_events(arguments = nil); end
  def get_calendars(arguments = nil); end
  def get_categories(arguments = nil); end
  def get_data_frame_analytics(arguments = nil); end
  def get_data_frame_analytics_stats(arguments = nil); end
  def get_datafeed_stats(arguments = nil); end
  def get_datafeeds(arguments = nil); end
  def get_filters(arguments = nil); end
  def get_influencers(arguments = nil); end
  def get_job_stats(arguments = nil); end
  def get_jobs(arguments = nil); end
  def get_model_snapshot_upgrade_stats(arguments = nil); end
  def get_model_snapshots(arguments = nil); end
  def get_overall_buckets(arguments = nil); end
  def get_records(arguments = nil); end
  def get_trained_model_deployment_stats(arguments = nil); end
  def get_trained_models(arguments = nil); end
  def get_trained_models_stats(arguments = nil); end
  def infer_trained_model_deployment(arguments = nil); end
  def info(arguments = nil); end
  def open_job(arguments = nil); end
  def post_calendar_events(arguments = nil); end
  def post_data(arguments = nil); end
  def preview_data_frame_analytics(arguments = nil); end
  def preview_datafeed(arguments = nil); end
  def put_calendar(arguments = nil); end
  def put_calendar_job(arguments = nil); end
  def put_data_frame_analytics(arguments = nil); end
  def put_datafeed(arguments = nil); end
  def put_filter(arguments = nil); end
  def put_job(arguments = nil); end
  def put_trained_model(arguments = nil); end
  def put_trained_model_alias(arguments = nil); end
  def put_trained_model_definition_part(arguments = nil); end
  def put_trained_model_vocabulary(arguments = nil); end
  def reset_job(arguments = nil); end
  def revert_model_snapshot(arguments = nil); end
  def set_upgrade_mode(arguments = nil); end
  def start_data_frame_analytics(arguments = nil); end
  def start_datafeed(arguments = nil); end
  def start_trained_model_deployment(arguments = nil); end
  def stop_data_frame_analytics(arguments = nil); end
  def stop_datafeed(arguments = nil); end
  def stop_trained_model_deployment(arguments = nil); end
  def update_data_frame_analytics(arguments = nil); end
  def update_datafeed(arguments = nil); end
  def update_filter(arguments = nil); end
  def update_job(arguments = nil); end
  def update_model_snapshot(arguments = nil); end
  def upgrade_job_snapshot(arguments = nil); end
  def validate(arguments = nil); end
  def validate_detector(arguments = nil); end
end
module Elasticsearch::API::Ingest
  def ingest; end
end
module Elasticsearch::API::Ingest::Actions
  def delete_pipeline(arguments = nil); end
  def geo_ip_stats(arguments = nil); end
  def get_pipeline(arguments = nil); end
  def processor_grok(arguments = nil); end
  def put_pipeline(arguments = nil); end
  def simulate(arguments = nil); end
end
module Elasticsearch::API::Features
  def features; end
end
module Elasticsearch::API::Features::Actions
  def get_features(arguments = nil); end
  def reset_features(arguments = nil); end
end
module Elasticsearch::API::Graph
  def graph; end
end
module Elasticsearch::API::Graph::Actions
  def explore(arguments = nil); end
end
module Elasticsearch::API::DanglingIndices
  def dangling_indices; end
end
module Elasticsearch::API::DanglingIndices::Actions
  def delete_dangling_index(arguments = nil); end
  def import_dangling_index(arguments = nil); end
  def list_dangling_indices(arguments = nil); end
end
module Elasticsearch::API::TextStructure
  def text_structure; end
end
module Elasticsearch::API::TextStructure::Actions
  def find_structure(arguments = nil); end
end
module Elasticsearch::API::Rollup
  def rollup; end
end
module Elasticsearch::API::Rollup::Actions
  def delete_job(arguments = nil); end
  def get_jobs(arguments = nil); end
  def get_rollup_caps(arguments = nil); end
  def get_rollup_index_caps(arguments = nil); end
  def put_job(arguments = nil); end
  def rollup(arguments = nil); end
  def rollup_search(arguments = nil); end
  def start_job(arguments = nil); end
  def stop_job(arguments = nil); end
end
module Elasticsearch::API::IndexLifecycleManagement
  def ilm; end
  def index_lifecycle_management; end
end
module Elasticsearch::API::IndexLifecycleManagement::Actions
  def delete_lifecycle(arguments = nil); end
  def explain_lifecycle(arguments = nil); end
  def get_lifecycle(arguments = nil); end
  def get_status(arguments = nil); end
  def migrate_to_data_tiers(arguments = nil); end
  def move_to_step(arguments = nil); end
  def put_lifecycle(arguments = nil); end
  def remove_policy(arguments = nil); end
  def retry(arguments = nil); end
  def start(arguments = nil); end
  def stop(arguments = nil); end
end
module Elasticsearch::API::Enrich
  def enrich; end
end
module Elasticsearch::API::Enrich::Actions
  def delete_policy(arguments = nil); end
  def execute_policy(arguments = nil); end
  def get_policy(arguments = nil); end
  def put_policy(arguments = nil); end
  def stats(arguments = nil); end
end
module Elasticsearch::API::CrossClusterReplication
  def ccr; end
  def cross_cluster_replication; end
end
module Elasticsearch::API::CrossClusterReplication::Actions
  def delete_auto_follow_pattern(arguments = nil); end
  def follow(arguments = nil); end
  def follow_info(arguments = nil); end
  def follow_stats(arguments = nil); end
  def forget_follower(arguments = nil); end
  def get_auto_follow_pattern(arguments = nil); end
  def pause_auto_follow_pattern(arguments = nil); end
  def pause_follow(arguments = nil); end
  def put_auto_follow_pattern(arguments = nil); end
  def resume_auto_follow_pattern(arguments = nil); end
  def resume_follow(arguments = nil); end
  def stats(arguments = nil); end
  def unfollow(arguments = nil); end
end
module Elasticsearch::API::AsyncSearch
  def async_search; end
end
module Elasticsearch::API::AsyncSearch::Actions
  def delete(arguments = nil); end
  def get(arguments = nil); end
  def status(arguments = nil); end
  def submit(arguments = nil); end
end
module Elasticsearch::API::Eql
  def eql; end
end
module Elasticsearch::API::Eql::Actions
  def delete(arguments = nil); end
  def get(arguments = nil); end
  def get_status(arguments = nil); end
  def search(arguments = nil); end
end
module Elasticsearch::API::SnapshotLifecycleManagement
  def slm; end
  def snapshot_lifecycle_management; end
end
module Elasticsearch::API::SnapshotLifecycleManagement::Actions
  def delete_lifecycle(arguments = nil); end
  def execute_lifecycle(arguments = nil); end
  def execute_retention(arguments = nil); end
  def get_lifecycle(arguments = nil); end
  def get_stats(arguments = nil); end
  def get_status(arguments = nil); end
  def put_lifecycle(arguments = nil); end
  def start(arguments = nil); end
  def stop(arguments = nil); end
end
module Elasticsearch::API::Fleet
  def fleet; end
end
module Elasticsearch::API::Fleet::Actions
  def global_checkpoints(arguments = nil); end
  def msearch(arguments = nil); end
  def search(arguments = nil); end
end
module Elasticsearch::API::Monitoring
  def monitoring; end
end
module Elasticsearch::API::Monitoring::Actions
  def bulk(arguments = nil); end
end
module Elasticsearch::API::Autoscaling
  def autoscaling; end
end
module Elasticsearch::API::Autoscaling::Actions
  def delete_autoscaling_policy(arguments = nil); end
  def get_autoscaling_capacity(arguments = nil); end
  def get_autoscaling_policy(arguments = nil); end
  def put_autoscaling_policy(arguments = nil); end
end
module Elasticsearch::API::Migration
  def migration; end
end
module Elasticsearch::API::Migration::Actions
  def deprecations(arguments = nil); end
  def get_feature_upgrade_status(arguments = nil); end
  def post_feature_upgrade(arguments = nil); end
end
module Elasticsearch::API::Transform
  def transform; end
end
module Elasticsearch::API::Transform::Actions
  def delete_transform(arguments = nil); end
  def get_transform(arguments = nil); end
  def get_transform_stats(arguments = nil); end
  def preview_transform(arguments = nil); end
  def put_transform(arguments = nil); end
  def reset_transform(arguments = nil); end
  def start_transform(arguments = nil); end
  def stop_transform(arguments = nil); end
  def update_transform(arguments = nil); end
  def upgrade_transforms(arguments = nil); end
end
module Elasticsearch::API::SQL
  def sql; end
end
module Elasticsearch::API::SQL::Actions
  def clear_cursor(arguments = nil); end
  def delete_async(arguments = nil); end
  def get_async(arguments = nil); end
  def get_async_status(arguments = nil); end
  def query(arguments = nil); end
  def translate(arguments = nil); end
end
class Elasticsearch::API::Autoscaling::AutoscalingClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Snapshot::SnapshotClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::IndexLifecycleManagement::IndexLifecycleManagementClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Watcher::WatcherClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::SQL::SQLClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::SSL::SSLClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Migration::MigrationClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Nodes::NodesClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::SearchableSnapshots::SearchableSnapshotsClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Transform::TransformClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::DataFrameTransformDeprecated::DataFrameTransformDeprecatedClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::MachineLearning::MachineLearningClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::License::LicenseClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Indices::IndicesClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Logstash::LogstashClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Cluster::ClusterClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::TextStructure::TextStructureClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Features::FeaturesClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Shutdown::ShutdownClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::SnapshotLifecycleManagement::SnapshotLifecycleManagementClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Cat::CatClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Monitoring::MonitoringClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::AsyncSearch::AsyncSearchClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Remote
  def remote; end
end
module Elasticsearch::API::Remote::Actions
end
class Elasticsearch::API::Remote::RemoteClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::DanglingIndices::DanglingIndicesClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Security::SecurityClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::XPack::XPackClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Graph::GraphClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Tasks::TasksClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Eql::EqlClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Enrich::EnrichClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Fleet::FleetClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Rollup::RollupClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::CrossClusterReplication::CrossClusterReplicationClient
  include Elasticsearch::API::Common::Client
end
class Elasticsearch::API::Ingest::IngestClient
  include Elasticsearch::API::Common::Client
end
