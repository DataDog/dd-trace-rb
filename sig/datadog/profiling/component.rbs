module Datadog
  module Profiling
    module Component
      ALLOCATION_WITH_RACTORS_ONLY_ONCE: Datadog::Core::Utils::OnlyOnce

      def self.build_profiler_component: (
        settings: untyped,
        agent_settings: Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings,
        optional_tracer: Datadog::Tracing::Tracer?,
        logger: Datadog::Core::Logger,
      ) -> [Datadog::Profiling::Profiler?, {profiling_enabled: bool}]

      def self.build_thread_context_collector: (
        untyped settings,
        Datadog::Profiling::StackRecorder recorder,
        Datadog::Tracing::Tracer? optional_tracer,
        bool timeline_enabled,
      ) -> Datadog::Profiling::Collectors::ThreadContext

      def self.build_profiler_exporter: (
        untyped settings,
        Datadog::Profiling::StackRecorder recorder,
        Datadog::Profiling::Collectors::CpuAndWallTimeWorker worker,
        internal_metadata: ::Hash[::Symbol, ::String | bool | ::Numeric],
      ) -> Datadog::Profiling::Exporter

      def self.build_profiler_transport: (
        untyped settings,
        Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings agent_settings
      ) -> untyped

      def self.enable_gc_profiling?: (untyped settings, Datadog::Core::Logger logger) -> bool
      def self.enable_allocation_profiling?: (untyped settings, Datadog::Core::Logger logger) -> bool
      def self.get_heap_sample_every: (untyped settings) -> ::Integer
      def self.enable_heap_profiling?: (
        untyped settings,
        bool allocation_profiling_enabled,
        ::Integer heap_sample_every,
        Datadog::Core::Logger logger,
      ) -> bool
      def self.enable_heap_size_profiling?: (untyped settings, bool heap_profiling_enabled, Datadog::Core::Logger logger) -> bool

      def self.no_signals_workaround_enabled?: (untyped settings, Datadog::Core::Logger logger) -> bool
      def self.incompatible_libmysqlclient_version?: (untyped settings, Datadog::Core::Logger logger) -> bool
      def self.incompatible_passenger_version?: () -> bool
      def self.flush_interval: (untyped settings) -> ::Numeric
      def self.valid_overhead_target: (::Float overhead_target_percentage, Datadog::Core::Logger logger) -> ::Float
      def self.looks_like_mariadb?: ({ header_version: ::String? }, ::Gem::Version) -> bool
      def self.dir_interruption_workaround_enabled?: (untyped settings, bool no_signals_workaround_enabled) -> bool
      def self.enable_gvl_profiling?: (untyped settings, Datadog::Core::Logger logger) -> bool
    end
  end
end
