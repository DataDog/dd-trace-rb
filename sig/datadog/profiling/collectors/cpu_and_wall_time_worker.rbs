module Datadog
  module Profiling
    module Collectors
      class CpuAndWallTimeWorker
        @worker_thread: untyped
        @start_stop_mutex: ::Thread::Mutex
        @failure_exception: ::Exception?
        @idle_sampling_helper: IdleSamplingHelper

        def initialize: (
          gc_profiling_enabled: bool,
          no_signals_workaround_enabled: bool,
          thread_context_collector: Datadog::Profiling::Collectors::ThreadContext,
          dynamic_sampling_rate_overhead_target_percentage: Float,
          ?idle_sampling_helper: Datadog::Profiling::Collectors::IdleSamplingHelper,
          ?dynamic_sampling_rate_enabled: bool,
          allocation_profiling_enabled: bool,
          ?skip_idle_samples_for_testing: false,
        ) -> void

        def self._native_initialize: (
          CpuAndWallTimeWorker self_instance,
          ThreadContext thread_context_collector,
          bool gc_profiling_enabled,
          IdleSamplingHelper idle_sampling_helper,
          bool no_signals_workaround_enabled,
          bool dynamic_sampling_rate_enabled,
          Float dynamic_sampling_rate_overhead_target_percentage,
          bool allocation_profiling_enabled,
          bool skip_idle_samples_for_testing,
        ) -> true

        def start: (?on_failure_proc: ::Proc?) -> bool?

        def stop: () -> void
        def self._native_stop: (CpuAndWallTimeWorker self_instance, ::Thread worker_thread) -> true

        def reset_after_fork: () -> true
        def self._native_reset_after_fork: (CpuAndWallTimeWorker self_instance) -> true

        def stats: () -> ::Hash[::Symbol, untyped]
        def self._native_stats: (CpuAndWallTimeWorker self_instance) -> ::Hash[::Symbol, untyped]
        def self._native_stats_reset_not_thread_safe: (CpuAndWallTimeWorker self_instance) -> void
        def self._native_is_running?: (CpuAndWallTimeWorker self_instance) -> bool
        def self._native_allocation_count: () -> ::Integer?
        def self._native_sampling_loop: (CpuAndWallTimeWorker self_instance) -> void

        def wait_until_running: (timeout_seconds: ::Integer?) -> true
      end
    end
  end
end
