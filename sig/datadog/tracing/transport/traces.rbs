module Datadog
  module Tracing
    module Transport
      module Traces
        class EncodedParcel
          @trace_count: untyped

          include Datadog::Core::Transport::Parcel

          attr_reader trace_count: untyped

          def initialize: (untyped data, untyped trace_count) -> void

          def count: () -> untyped
        end
        class Request < Datadog::Core::Transport::Request
        end
        module Response
          attr_reader service_rates: untyped

          attr_reader trace_count: untyped
        end
        class Chunker
          @encoder: untyped

          @logger: untyped

          @native_events_supported: bool

          @max_size: untyped
          DEFAULT_MAX_PAYLOAD_SIZE: untyped

          attr_reader encoder: untyped

          attr_reader max_size: untyped

          attr_reader logger: untyped
          def initialize: (untyped encoder, logger: untyped, native_events_supported: untyped, ?max_size: untyped) -> void
          def encode_in_chunks: (untyped traces) -> untyped

          private

          def encode_one: (untyped trace) -> (nil | untyped)
        end
        module Encoder
          def self?.encode_trace: (untyped encoder, untyped trace, logger: untyped, native_events_supported: untyped) -> untyped
        end
        class Transport
          @apis: untyped

          @default_api: untyped

          @logger: untyped

          @current_api_id: untyped

          @client: untyped

          @native_events_supported: bool

          attr_reader client: untyped

          attr_reader apis: untyped

          attr_reader default_api: untyped

          attr_reader current_api_id: untyped

          attr_reader logger: untyped

          def initialize: (untyped apis, untyped default_api, ?logger: untyped) -> void

          def send_traces: (Array[Tracing::TraceOperation] traces) -> untyped

          def stats: () -> untyped

          def current_api: () -> untyped

          private

          def downgrade?: (untyped response) -> (false | untyped)

          def downgrade!: () -> untyped

          def change_api!: (untyped api_id) -> untyped
          def native_events_supported?: () -> bool
          class UnknownApiVersionError < StandardError
            @version: untyped

            attr_reader version: untyped

            def initialize: (untyped version) -> void

            def message: () -> ::String
          end
          class NoDowngradeAvailableError < StandardError
            @version: untyped

            attr_reader version: untyped

            def initialize: (untyped version) -> void

            def message: () -> ::String
          end
        end
      end
    end
  end
end
