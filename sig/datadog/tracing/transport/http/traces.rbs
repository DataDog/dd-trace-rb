module Datadog
  module Tracing
    module Transport
      module HTTP
        module Traces
          class Response
            @service_rates: untyped

            @trace_count: untyped

            include Datadog::Core::Transport::HTTP::Response

            include Datadog::Tracing::Transport::Traces::Response

            def initialize: (untyped http_response, ?::Hash[untyped, untyped] options) -> void
          end
          module Client
            def send_traces_payload: (untyped request) -> untyped
          end

          module API
            class Spec < Core::Transport::HTTP::API::Spec
              attr_accessor traces: untyped

              def send_traces: (untyped env) { (?) -> untyped } -> untyped

              def encoder: () -> untyped
            end
            class Instance < Core::Transport::HTTP::API::Instance
              def send_traces: (untyped env) -> untyped
            end
            class Endpoint < Datadog::Core::Transport::HTTP::API::Endpoint
              @encoder: untyped

              @service_rates: untyped

              HEADER_CONTENT_TYPE: "Content-Type"

              HEADER_TRACE_COUNT: "X-Datadog-Trace-Count"

              SERVICE_RATE_KEY: "rate_by_service"

              attr_reader encoder: untyped

              def initialize: (untyped path, untyped encoder, ?::Hash[untyped, untyped] options) -> void

              def service_rates?: () -> untyped

              def call: (untyped env) { (?) -> untyped } -> untyped
            end
          end
        end
      end
    end
  end
end
