module Datadog
  module Tracing
    class Span
      include Metadata

      attr_accessor end_time: (Time | nil)
      attr_accessor id: Integer
      attr_accessor meta: Hash[String, String]
      attr_accessor metastruct: Hash[String, untyped]
      attr_accessor metrics: Hash[String, Float]
      attr_accessor name: String
      attr_accessor parent_id: Integer
      attr_accessor resource: String
      attr_accessor service: (String | nil)
      attr_accessor links: Array[Datadog::Tracing::SpanLink]
      attr_accessor events: Array[Datadog::Tracing::SpanEvent]
      attr_accessor type: (String | nil)
      attr_accessor start_time: (Time | nil)
      attr_accessor status: Integer
      attr_accessor trace_id: Integer
      attr_writer duration: (Float | nil)

      def initialize: (
          String name,
          ?duration: (Float | nil),
          ?end_time: (Time | nil),
          ?id: (Integer | nil),
          ?meta: (Hash[String, String] | nil),
          ?metastruct: (Hash[String, untyped] | nil),
          ?metrics: (Hash[String, Float] | nil),
          ?parent_id: Integer,
          ?resource: String,
          ?service: (String | nil),
          ?start_time: (Time | nil),
          ?status: Integer,
          ?type: (String | nil),
          ?trace_id: (Integer | nil),
          ?service_entry: (bool | nil),
          ?links: (Array[Datadog::Tracing::SpanLink] | nil),
          ?events: (Array[Datadog::Tracing::SpanEvent] | nil)
        ) -> void

      def started?: -> bool
      def stopped?: -> bool

      alias finished? stopped?

      def duration: -> (Float | nil)
      def set_error: (Exception e) -> void
      def ==: (Span other) -> bool
      def to_s: -> String
      def to_hash: -> Hash[Symbol, untyped]
      def pretty_print: (PP q) -> void

      private

      def duration_nano: -> Integer?

      def service_entry?: -> bool

      def start_time_nano: -> Integer?
    end
  end
end
