module Datadog
  module Tracing
    module Contrib
      module GraphQL
        module UnifiedTrace
          @has_prepare_span: bool

          @service_name: String?

          @analytics_enabled: bool

          @analytics_sample_rate: Float

          @error_extensions_config: Array[String]

          @event_name: String

          @message_key: String

          @type_key: String

          @stacktrace_key: String

          @locations_key: String

          @path_key: String

          @extensions_key: String

          include ::GraphQL::Tracing::PlatformTrace

          def initialize: (*untyped args, **untyped kwargs) -> void

          private

          def load_error_event_attributes: (bool error_tracking) -> void

          public

          type lexerArray = Array[Integer | Symbol | String | nil | lexerArray]

          def lex: (*untyped args, query_string: String, **untyped kwargs) -> lexerArray

          def parse: (*untyped args, query_string: String, **untyped kwargs) -> GraphQL::Language::Nodes::Document

          def validate: (*untyped args, query: GraphQL::Query, validate: bool, **untyped kwargs) -> { remaining_timeout: Float?, error: Array[StandardError] }

          def analyze_multiplex: (*untyped args, multiplex: GraphQL::Execution::Multiplex, **untyped kwargs) -> Array[Object]

          def analyze_query: (*untyped args, query: GraphQL::Query, **untyped kwargs) -> Array[Object]

          def execute_multiplex: (*untyped args, multiplex: GraphQL::Execution::Multiplex, **untyped kwargs) -> Array[GraphQL::Query::Result]

          def execute_query: (*untyped args, query: GraphQL::Query, **untyped kwargs) -> GraphQL::Query::Result

          def execute_query_lazy: (*untyped args, query: GraphQL::Query, multiplex: GraphQL::Execution::Multiplex, **untyped kwargs) -> GraphQL::Query::Result

          type executeFieldKwargs = {query: GraphQL::Query, field: GraphQL::Schema::Field, ast_node: GraphQL::Language::Nodes::Field, arguments: Hash[Symbol, String], object: GraphQL::Schema::Object?}

          def execute_field_span: (Proc callable, String span_key, **executeFieldKwargs kwargs) -> Array[Object]

          def execute_field: (*untyped args, **executeFieldKwargs kwargs) -> Array[Object]

          def execute_field_lazy: (*untyped args, **executeFieldKwargs kwargs) -> Array[Object]

          type authorizedKwargs = {query: GraphQL::Query, type: GraphQL::Schema::Object, object: GraphQL::Schema::Object?}

          def authorized_span: (Proc callable, String span_key, **authorizedKwargs kwargs) -> GraphQL::Schema::Object?

          def authorized: (*untyped args, **authorizedKwargs kwargs) -> GraphQL::Schema::Object?

          def authorized_lazy: (*untyped args, **authorizedKwargs kwargs) -> GraphQL::Schema::Object?

          type resolveTypeKwargs = {query: GraphQL::Query, type: GraphQL::Schema::Union, object: GraphQL::Schema::Object?}

          def resolve_type_span: (Proc callable, String span_key, **resolveTypeKwargs kwargs) -> [GraphQL::Schema::Object, nil]

          def resolve_type: (*untyped args, **resolveTypeKwargs kwargs) -> [GraphQL::Schema::Object, nil]

          def resolve_type_lazy: (*untyped args, **resolveTypeKwargs kwargs) -> [GraphQL::Schema::Object, nil]

          def platform_field_key: (GraphQL::Schema::Field field, *untyped args, **untyped kwargs) -> String

          def platform_authorized_key: (GraphQL::Schema::Object type, *untyped args, **untyped kwargs) -> ::String

          def platform_resolve_type_key: (GraphQL::Schema::Union type, *untyped args, **untyped kwargs) -> ::String

          private

          type traceKwargsValues = GraphQL::Query | GraphQL::Schema::Union | GraphQL::Schema::Object | GraphQL::Schema::Field | GraphQL::Execution::Multiplex | GraphQL::Language::Nodes::Field | Hash[Symbol, String] | String | bool | nil

          type traceResult = lexerArray | GraphQL::Language::Nodes::Document | { remaining_timeout: Float?, error: Array[StandardError] } | Array[Object] | GraphQL::Schema::Object? | [GraphQL::Schema::Object, nil]

          def trace: (Proc callable, String trace_key, String resource, ?^(SpanOperation) -> void before, ?^(SpanOperation) -> void after, **Hash[Symbol, traceKwargsValues] kwargs) ?{ (SpanOperation) -> void } -> traceResult

          def multiplex_resource: (GraphQL::Execution::Multiplex multiplex) -> String?

          def operation_resource: (GraphQL::Language::Nodes::OperationDefinition operation) -> String

          def add_query_error_events: (SpanOperation span, Array[::GraphQL::Error] errors) -> void

          def serialize_error_locations: (Array[{"line" => Integer, "column" => Integer}] locations) -> Array[String]
        end
      end
    end
  end
end
