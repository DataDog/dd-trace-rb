module Datadog
  module Tracing
    module Contrib
      module GraphQL
        module UnifiedTrace
          @has_prepare_span: bool

          @service_name: String?

          @analytics_enabled: bool?

          @analytics_sample_rate: Float?

          @error_extensions_config: Array[String]

          @event_name: String

          @message_key: String

          @type_key: String

          @stacktrace_key: String

          @locations_key: String

          @path_key: String

          @extensions_key: String

          @platform_key_cache: untyped

          include ::GraphQL::Tracing::PlatformTrace

          def initialize: (*untyped args, **untyped kwargs) -> void

          private

          def load_error_event_attributes: (bool error_tracking) -> void

          public

          type lexerArray = Array[Integer | Symbol | String | nil | lexerArray]

          def lex: (*untyped args, query_string: String, **untyped kwargs) -> untyped

          def parse: (*untyped args, query_string: String, **untyped kwargs) -> untyped

          def validate: (*untyped args, query: GraphQL::Query, validate: bool, **untyped kwargs) -> untyped

          def analyze_multiplex: (*untyped args, multiplex: GraphQL::Execution::Multiplex, **untyped kwargs) -> untyped

          def analyze_query: (*untyped args, query: GraphQL::Query, **untyped kwargs) -> untyped

          def execute_multiplex: (*untyped args, multiplex: GraphQL::Execution::Multiplex, **untyped kwargs) -> untyped

          def execute_query: (*untyped args, query: GraphQL::Query, **untyped kwargs) -> untyped

          def execute_query_lazy: (*untyped args, query: GraphQL::Query?, multiplex: GraphQL::Execution::Multiplex?, **untyped kwargs) -> untyped

          type executeFieldKwargs = {field: GraphQL::Schema::Field, ast_node: GraphQL::Language::Nodes::Field, query: GraphQL::Query, object: untyped, arguments: Hash[untyped, untyped]}

          def execute_field_span: (Proc callable, String span_key, **executeFieldKwargs kwargs) -> untyped

          def execute_field: (*untyped args, **executeFieldKwargs kwargs) -> untyped

          def execute_field_lazy: (*untyped args, **executeFieldKwargs kwargs) -> untyped

          type authorizedKwargs = {query: GraphQL::Query, type: singleton(GraphQL::Schema::Member), object: untyped}

          def authorized_span: (Proc callable, String span_key, **authorizedKwargs kwargs) -> untyped

          def authorized: (*untyped args, **authorizedKwargs kwargs) -> untyped

          def authorized_lazy: (*untyped args, **authorizedKwargs kwargs) -> untyped

          type resolveTypeKwargs = {query: GraphQL::Query, type: singleton(GraphQL::Schema::Member), object: untyped}

          def resolve_type_span: (Proc callable, String span_key, **resolveTypeKwargs kwargs) -> untyped

          def resolve_type: (*untyped args, **resolveTypeKwargs kwargs) -> untyped

          def resolve_type_lazy: (*untyped args, **resolveTypeKwargs kwargs) -> untyped

          def platform_field_key: (GraphQL::Schema::Field field, *untyped args, **untyped kwargs) -> String

          def platform_authorized_key: (singleton(GraphQL::Schema::Member) type, *untyped args, **untyped kwargs) -> String

          def platform_resolve_type_key: (singleton(GraphQL::Schema::Member) type, *untyped args, **untyped kwargs) -> String

          def prepare_span: (String trace_key, Hash[Symbol, untyped] kwargs, SpanOperation span) -> void

          private

          def trace: (Proc callable, String trace_key, (String | nil) resource, ?(^(SpanOperation) -> void)? before, ?(^(SpanOperation) -> void)? after, **untyped kwargs) ?{ (SpanOperation) -> void } -> untyped

          def multiplex_resource: (GraphQL::Execution::Multiplex? multiplex) -> String?

          def operation_resource: (GraphQL::Language::Nodes::OperationDefinition? operation) -> String

          def add_query_error_events: (SpanOperation span, Array[GraphQL::Error] errors) -> void

          def serialize_error_locations: (Array[Hash[String, Integer]] locations) -> Array[String]
        end
      end
    end
  end
end
