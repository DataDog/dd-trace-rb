module Datadog
  module DataStreams
    module Transport
      module Stats
        class EncodedParcel
          include Core::Transport::Parcel

          @data: ::String

          attr_reader data: ::String

          def initialize: (::String data) -> void
        end

        class Request < Core::Transport::Request
        end

        class Transport
          @apis: Core::Transport::HTTP::API::Map
          @logger: Core::Logger
          @default_api: ::String
          @current_api_id: ::String
          @client: HTTP::Client

          attr_reader client: HTTP::Client
          attr_reader apis: Core::Transport::HTTP::API::Map
          attr_reader current_api_id: ::String
          attr_reader logger: Core::Logger

          def initialize: (
            Core::Transport::HTTP::API::Map apis,
            ::String default_api,
            logger: Core::Logger
          ) -> void

          def send_stats: (::Hash[::String, untyped] payload) -> (Core::Transport::HTTP::Response | Core::Transport::InternalErrorResponse)

          def current_api: () -> HTTP::Stats::API::Instance
        end
      end
    end
  end
end
