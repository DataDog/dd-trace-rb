module Datadog
  module OpenFeature
    class Evaluator
      module Binding
        class ResolutionDetails < ::Struct[untyped]
          attr_reader value: untyped

          attr_reader reason: ::String

          attr_reader variant: untyped

          attr_reader error_code: ::String

          attr_reader error_message: ::String

          attr_reader flag_metadata: untyped

          def self.new: (
            ?value: untyped,
            ?reason: ::String,
            ?variant: untyped,
            ?error_code: ::String,
            ?error_message: ::String,
            ?flag_metadata: untyped
          ) -> instance
        end

        class Evaluator
          @ufc_json: ::String

          def initialize: (::String ufc_json) -> void

          def get_assignment: (
            Configuration configuration,
            ::String flag_key,
            untyped evaluation_context,
            ::Symbol expected_type,
            ::Integer time
          ) -> ResolutionDetails

          private

          def generate: (::Symbol expected_type) -> untyped
        end
      end

      class ResolutionError < ::Struct[untyped]
        attr_reader reason: ::String

        attr_reader code: ::String

        attr_reader message: ::String

        def self.new: (?reason: ::String, ?code: ::String, ?message: ::String) -> instance
      end

      PROVIDER_NOT_READY: ::String

      PROVIDER_FATAL: ::String

      ERROR_MESSAGE_NOT_READY: ::String

      INITIALIZING: ::String

      ERROR: ::String

      ALLOWED_TYPES: ::Array[::Symbol]

      UNKNOWN_TYPE: ::String

      attr_writer ufc_json: ::String

      def initialize: (Core::Telemetry::Component telemetry) -> void

      def fetch_value: (
        flag_key: ::String,
        expected_type: ::Symbol,
        ?evaluation_context: ::OpenFeature::SDK::EvaluationContext
      ) -> (Binding::ResolutionDetails | ResolutionError)

      def reconfigure!: () -> void
    end
  end
end
