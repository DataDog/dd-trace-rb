module Datadog
  module AppSec
    module Reactive
      class Operation
        attr_reader reactive: Engine
        attr_reader parent: Operation?
        attr_reader name: ::String

        def initialize: (::String name, ?Operation? parent, ?Engine? reactive_engine) ?{ (Operation) -> void } -> void
        def logger: () -> ::Logger
        def subscribe: (*::String addresses) { (*untyped values) -> void } -> void
        def publish: (::String address, untyped data) -> untyped
        def finalize: () -> void

        private

        def select_reactive_engine: (Engine? reactive, Operation? parent) -> Engine

        def self.active: () -> Operation?

        def self.reset!: () -> untyped
      end
    end
  end
end
