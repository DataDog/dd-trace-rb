module Datadog
  module AppSec
    module Configuration
      def self.included: (::Module base) -> void

      class DSL
        type option = ::Integer | bool | ::Symbol | ::String | ::StringIO | ::File | ::Regexp | ::Hash[::Symbol | ::String, option] | ::Array[option]
        type options = ::Hash[::Symbol, option]

        class Instrument < ::Struct[untyped]
          def initialize: (::Symbol name, options options) -> void
          attr_accessor name: ::Symbol
          attr_accessor options: options
        end

        @instruments: ::Array[Instrument]
        @options: options

        def options: () -> options

        def initialize: () -> void

        def instrument: (::Symbol name, ?options options) -> void

        def instruments: () -> ::Array[Instrument]

        def enabled=: (bool) -> void
        def ruleset=: (::Symbol | ::String | ::Hash[::String, untyped] | ::File | ::StringIO) -> void
        def ip_denylist=: (::Array[::String]) -> void
        def user_id_denylist=: (::Array[::String]) -> void
        def waf_timeout=: (::Integer) -> void
        def waf_debug=: (bool) -> void
        def trace_rate_limit=: (::Integer) -> void
        def obfuscator_key_regex=: (::String | ::Regexp) -> void
        def obfuscator_value_regex=: (::String | ::Regexp) -> void
      end

      module ClassMethods
        @settings: Settings

        def configure: () { (DSL) -> void } -> void

        def settings: () -> Settings
      end
    end
  end
end
