module Datadog
  module AppSec
    class Processor
      class Context
        type event = untyped
        type data = WAF::data

        attr_reader time_ns: ::Float
        attr_reader time_ext_ns: ::Float
        attr_reader timeouts: ::Integer
        attr_reader events: ::Array[event]

        @context: WAF::Context

        @run_mutex: ::Thread::Mutex

        def initialize: (Processor processor) -> void
        def run: (Hash[untyped, untyped] input, ?::Integer timeout) -> WAF::Result
        def extract_schema: () -> WAF::Result?
        def finalize: () -> void

        private
        def extract_schema?: () -> bool
      end

      def self.active_context: () -> Context

      private

      attr_reader diagnostics: untyped
      attr_reader addresses: untyped

      @handle: WAF::Handle
      @ruleset: ::Hash[::String, untyped]
      @addresses: ::Array[::String]

      def initialize: (ruleset: ::Hash[untyped, untyped]) -> void
      def ready?: () -> bool
      def finalize: () -> void

      attr_reader handle: untyped

      private

      def load_libddwaf: () -> bool
      def create_waf_handle: (Datadog::Core::Configuration::Settings::_AppSec settings, ::Hash[String, untyped] ruleset) -> bool

      def self.libddwaf_provides_waf?: () -> bool
      def self.require_libddwaf: () -> bool
      def self.libddwaf_spec: () -> ::Gem::BasicSpecification
      def self.libddwaf_platform: () -> ::String
      def self.ruby_platforms: () -> ::Array[::String]
    end
  end
end
