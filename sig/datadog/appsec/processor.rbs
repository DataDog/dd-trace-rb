module Datadog
  module AppSec
    class Processor
      class Context
        type event = untyped
        type data = WAF::data

        attr_reader time_ns: ::Float
        attr_reader time_ext_ns: ::Float
        attr_reader timeouts: ::Integer
        attr_reader events: ::Array[event]

        @context: WAF::Context

        def initialize: (Processor processor) -> void
        def run: (data input, ?::Integer timeout) -> WAF::Result
        def finalize: () -> void
      end

      def self.active_context: () -> Context

      private

      def self.active_context=: (untyped context) -> untyped
      def self.reset_active_context: () -> untyped

      class NoActiveContextError < StandardError
      end

      class AlreadyActiveContextError < StandardError
      end

      attr_reader ruleset_info: untyped
      attr_reader addresses: untyped

      @handle: WAF::Handle
      @ruleset: ::Hash[::String, untyped]
      @addresses: ::Array[::String]

      def initialize: () -> void
      def ready?: () -> bool
      def new_context: () -> Context
      def activate_context: () -> Context
      def deactivate_context: () -> void
      def update_rule_data: (untyped data) -> untyped
      def toggle_rules: (untyped map) -> untyped
      def finalize: () -> void

      attr_reader handle: untyped

      private

      def apply_denylist_data: (Configuration::Settings settings) -> untyped
      def denylist_data: (String id, ::Array[untyped] denylist) -> ::Hash[::String, untyped | "data_with_expiration"]
      def load_libddwaf: () -> bool
      def load_ruleset: (Configuration::Settings settings) -> bool
      def create_waf_handle: (Configuration::Settings settings) -> bool

      def self.libddwaf_provides_waf?: () -> bool
      def self.require_libddwaf: () -> bool
      def self.libddwaf_spec: () -> ::Gem::BasicSpecification
      def self.libddwaf_platform: () -> ::String
      def self.ruby_platforms: () -> ::Array[::String]
    end
  end
end
