module Datadog
  module AppSec
    class Context
      type input_data = SecurityEngine::Runner::input_data

      @trace: Tracing::TraceOperation

      @span: Tracing::SpanOperation

      @events: ::Array[untyped]

      @waf_runner: SecurityEngine::Runner

      @metrics: Metrics::Collector

      @interrupted: bool

      ActiveContextError: ::StandardError

      attr_reader trace: Tracing::TraceOperation

      attr_reader span: Tracing::SpanOperation

      attr_reader events: ::Array[untyped]

      def self.activate: (Context context) -> Context

      def self.deactivate: () -> void

      def self.active: () -> Context

      def initialize: (Tracing::TraceOperation trace, Tracing::SpanOperation span, SecurityEngine::Runner waf_runner) -> void

      def run_waf: (input_data persistent_data, input_data ephemeral_data, ?Integer timeout) -> SecurityEngine::result

      def run_rasp: (Ext::rasp_rule_type type, input_data persistent_data, input_data ephemeral_data, ?Integer timeout) -> SecurityEngine::result

      def mark_as_interrupted!: () -> void

      def interrupted?: () -> bool

      def ruleset_version: () -> ::String

      def export_metrics: () -> void

      def export_request_telemetry: () -> void

      def finalize!: () -> void
    end
  end
end
