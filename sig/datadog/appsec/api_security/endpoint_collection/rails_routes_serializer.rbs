module Datadog
  module AppSec
    module APISecurity
      module EndpointCollection
        interface _RailsRoute
          def dispatcher?: () -> bool
          def verb: () -> String
          def path: () -> _RailsRoutePath
          def app: () -> _RailsRouteApp
        end

        interface _RailsRoutePath
          def spec: () -> _RailsRouteSpec
        end

        interface _RailsRouteSpec
          def to_s: () -> String
        end

        interface _RailsRouteApp
          def rack_app: () -> _RackApp
        end

        interface _RackApp
          def is_a?: (Class) -> bool

          def routes: () -> untyped
        end

        class RailsRoutesSerializer
          FORMAT_SUFFIX: String

          @routes: Array[_RailsRoute]

          def initialize: (Array[_RailsRoute] routes) -> void

          def to_enum: () -> Enumerator[Core::Telemetry::Event::AppEndpointsLoaded::endpoint]

          def serialize_route: (_RailsRoute route) -> Core::Telemetry::Event::AppEndpointsLoaded::endpoint

          private

          def grape_app?: (_RackApp rack_app) -> bool

          def sinatra_app?: (_RackApp rack_app) -> bool
        end
      end
    end
  end
end
