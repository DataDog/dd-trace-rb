module Datadog
  module Core
    module Configuration
      class Option
        type env_value = Hash[String, String] | Array[String] | String | Integer | Float | bool | nil
        type env_vars = Hash[String, String] | ::RBS::Unnamed::ENVClass

        @context: Options::GenericSettingsClass

        @is_set: bool
        @value: Object?

        @value_per_precedence: ::Hash[Precedence::Value, Object?]

        attr_reader definition: OptionDefinition
        attr_reader precedence_set: Precedence::Value

        module Precedence
          REMOTE_CONFIGURATION: Value
          PROGRAMMATIC: Value
          FLEET_STABLE: Value
          ENVIRONMENT: Value
          LOCAL_STABLE: Value
          DEFAULT: Value
          LIST: Array[Value]

          class Value
            include Comparable

            attr_accessor numeric: Integer
            attr_accessor name: Symbol
            attr_accessor origin: String

            @numeric: Integer
            @name: Symbol
            @origin: String

            def initialize: (Integer numeric, Symbol name, String origin) -> void
            def <=>: (Object? other) -> Integer?
          end
        end

        def initialize: (OptionDefinition definition, Options::GenericSettingsClass context) -> void

        def set: (Object? value, ?precedence: Precedence::Value) -> Object?

        def get: () -> Object?

        def reset: () -> void

        def default_value: () -> (OptionDefinition::option_type | Options::GenericSettingsClass)

        def default_precedence?: () -> bool

        def unset: (Precedence::Value) -> void

        private

        def coerce_env_variable: (String value) -> env_value

        class InvalidDefinitionError < StandardError
        end

        def validate_type: (Object? value) -> Object?

        def validate: (Symbol? type, Object? value) -> bool

        def internal_set: (Object? value, Precedence::Value precedence) -> Object?

        def context_exec: [U] (*Object? args) { (?) [self: Options::GenericSettingsClass] -> U } -> U

        def context_eval: [U] () { (Options::GenericSettingsClass settings) [self: Options::GenericSettingsClass] -> U } -> U

        def set_default_value: () -> void

        def set_env_value: () -> void

        def set_customer_stable_config_value: () -> void

        def set_fleet_stable_config_value: () -> void

        def get_value_from_ENV: () -> env_value

        def get_value_from: (env_vars env_vars, String source) -> env_value

        UNSET: Object
      end
    end
  end
end
