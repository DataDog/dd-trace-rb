module Datadog
  module Core
    module Configuration
      class Option
        type env_value = Hash[String, String] | Array[String] | String | Integer | Float | bool | nil
        type env_vars = Hash[String, String] | ::RBS::Unnamed::ENVClass

        @context: Configuration::Options::GenericSettingsClass

        @is_set: bool
        @value: Object?

        @value_per_precedence: ::Hash[Precedence::Value, Object?]

        attr_reader definition: Configuration::OptionDefinition
        attr_reader precedence_set: Precedence::Value
        attr_reader resolved_env: String?

        module Precedence
          REMOTE_CONFIGURATION: Value
          PROGRAMMATIC: Value
          FLEET_STABLE: Value
          ENVIRONMENT: Value
          LOCAL_STABLE: Value
          DEFAULT: Value
          LIST: Array[Value]

          class Value
            include Comparable

            attr_reader numeric: int
            attr_reader name: Symbol
            attr_reader origin: String

            def initialize: (int numeric, Symbol name, String origin) -> void
          end
        end

        # context is a class that includes `Configuration::Options::InstanceMethods`.
        # Only `Configuration::Base` includes `Configuration::Options::InstanceMethods` (through `Configuration::Options`).
        # `Configuration::Base` is used by settings classes.
        def initialize: (Configuration::OptionDefinition definition, Configuration::Options::InstanceMethods context) -> void

        def set: (Object? value, ?precedence: Precedence::Value, ?resolved_env: String?) -> Object?

        def get: () -> Object?

        def reset: () -> void

        def default_value: () -> (Configuration::OptionDefinition::option_type | Configuration::Options::GenericSettingsClass)

        def default_precedence?: () -> bool

        def unset: (Precedence::Value) -> void

        private

        def coerce_env_variable: (String value) -> env_value

        class InvalidDefinitionError < StandardError
        end

        def validate_type: (Object? value) -> Object?

        def validate: (Symbol? type, Object? value) -> bool

        def internal_set: (Object? value, Precedence::Value precedence, String? resolved_env) -> Object?

        # `context_exec/eval` can take any block (and args) and just apply them to the context using `instance_exec/eval`.
        # Which makes it impossible to type. Even if we know the type of the blocks that uses `context_exec`,
        # in the case of `after_set`, the block returns void, but `setter`, `resetter` and `env_parser` return a value.
        def context_exec: (*Object? args) { (?) [self: untyped] -> untyped } -> untyped

        def context_eval: () { (untyped) [self: untyped] -> untyped } -> untyped

        def set_default_value: () -> void

        def set_env_value: () -> void

        def set_customer_stable_config_value: () -> void

        def set_fleet_stable_config_value: () -> void

        def get_value_and_resolved_env_from: (env_vars env_vars, ?source: String ) -> [env_value, String?]

        UNSET: Object
      end
    end
  end
end
