module Datadog
  module Core
    module Configuration
      module Options
        extend ClassMethods
        include InstanceMethods

        def self.included: (Class | Module base) -> void

        module ClassMethods
          @options: Hash[Symbol, OptionDefinition]
          @settings_name: String?

          def options: () -> Hash[Symbol, OptionDefinition]

          def option: (Symbol name, ?Configuration::OptionDefinition::meta meta) ?{ (Configuration::OptionDefinition::Builder) -> void } -> Configuration::OptionDefinition

          private

          def default_helpers: (Symbol | String name) -> Hash[Symbol, Proc]

          def define_helpers: (Hash[Symbol, Proc] helpers) -> void

          # Fake methods to make it work with RBS. RBS cannot understand that this module is only used in a class context.
          def superclass: () -> singleton(Options)
          def define_method: (untyped name) { (untyped) -> untyped } -> untyped
        end

        module InstanceMethods
          extend ClassMethods

          @options: Hash[Symbol, Option]

          def options: () -> Hash[Symbol, Option]

          def set_option: (Symbol name, Object? value, ?precedence: Option::Precedence::Value) -> Object?

          def unset_option: (Symbol name, ?precedence: Option::Precedence::Value) -> void

          def get_option: (Symbol name) -> Object?

          def reset_option: (Symbol name) -> void

          def option_defined?: (Symbol name) -> bool

          def using_default?: (Symbol name) -> bool

          def options_hash: () -> Hash[Symbol, Object?]

          def reset_options!: () -> void

          private

          def resolve_option: (Symbol name) -> Option

          def resolved_env: (Symbol name) -> String?

          def assert_valid_option!: (Symbol name) -> void
        end

        class InvalidOptionError < StandardError
        end

        class GenericSettingsClass
          include Options
        end
      end
    end
  end
end
