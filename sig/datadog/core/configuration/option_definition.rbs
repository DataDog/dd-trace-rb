module Datadog
  module Core
    module Configuration
      class OptionDefinition
        type option_type = String | Integer | Float | Rational | Symbol | bool | Array[untyped] | Hash[untyped, untyped] | nil

        type option_proc = (^(Options::GenericSettingsClass settings) [self: Options::GenericSettingsClass] -> option_type)

        type generic_proc = (^(?) [self: Options::GenericSettingsClass] -> untyped)

        type meta = {
          ?default: (option_type | option_proc | Options::GenericSettingsClass)?,
          ?default_proc: generic_proc?,
          ?env: String?,
          ?env_parser: (^(String env_value) [self: Options::GenericSettingsClass] -> Option::env_value)?,
          ?after_set: (^(option_type value, option_type old_value, Option::Precedence::Value precedence) [self: Options::GenericSettingsClass] -> void)?,
          ?resetter: (^(option_type value) [self: Options::GenericSettingsClass] -> option_type)?,
          ?setter: (^(option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type)?,
          ?type: Symbol?,
          ?type_options: Hash[Symbol, untyped]
        }

        type meta_with_mandatory_fields = {
          ?default: (option_type | option_proc | Options::GenericSettingsClass)?,
          ?default_proc: generic_proc?,
          ?env: String?,
          ?env_parser: (^(String env_value) [self: Options::GenericSettingsClass] -> Option::env_value)?,
          ?after_set: (^(option_type value, option_type old_value, Option::Precedence::Value precedence) [self: Options::GenericSettingsClass] -> void)?,
          ?resetter: (^(option_type value) [self: Options::GenericSettingsClass] -> option_type)?,
          ?setter: (^(option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type)?,
          ?type: Symbol?,
          type_options: Hash[Symbol, untyped]
        }

        IDENTITY: ^(option_type new_value, option_type _old_value) [self: Options::GenericSettingsClass] -> option_type

        attr_reader default: option_type | option_proc | Options::GenericSettingsClass

        attr_reader default_proc: generic_proc?

        attr_reader env: String?

        attr_reader env_parser: (^(String env_value) [self: Options::GenericSettingsClass] -> Option::env_value)?

        attr_reader name: Symbol

        attr_reader after_set: (^(option_type value, option_type old_value, Option::Precedence::Value precedence) [self: Options::GenericSettingsClass] -> void)?

        attr_reader resetter: (^(option_type value) [self: Options::GenericSettingsClass] -> option_type)?

        attr_reader setter: (^(option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type)

        attr_reader type: Symbol?

        attr_reader type_options: Hash[Symbol, untyped]

        def initialize: (String | Symbol name, meta_with_mandatory_fields meta) ?{ (option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type } -> void

        def build: (Options::GenericSettingsClass context) -> Option

        class Builder
          class InvalidOptionError < StandardError
          end

          attr_reader helpers: Hash[Symbol, generic_proc]

          @env: String?
          @env_parser: (^(String env_value) [self: Options::GenericSettingsClass] -> Option::env_value)?
          @default: option_type | option_proc | Options::GenericSettingsClass
          @default_proc: generic_proc?
          @helpers: Hash[Symbol, generic_proc]
          @name: Symbol
          @after_set: (^(option_type value, option_type old_value, Option::Precedence::Value precedence) [self: Options::GenericSettingsClass] -> void)?
          @resetter: (^(option_type value) [self: Options::GenericSettingsClass] -> option_type)?
          @setter: (^(option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type)
          @type: Symbol?
          @type_options: Hash[Symbol, untyped]

          def initialize: (String | Symbol name, ?meta options) ?{ (Builder) -> void } -> void

          def env: (String? value) -> void

          def env_parser: () ?{ (String env_value) [self: Options::GenericSettingsClass] -> Option::env_value } -> void

          # can also be a class that includes Configuration::Base for new settings
          def default: (?(option_type | option_proc | Options::GenericSettingsClass) value) ?{ (Options::GenericSettingsClass settings) [self: Options::GenericSettingsClass] -> option_type } -> void

          def default_proc: () ?{ (?) [self: Options::GenericSettingsClass] -> untyped } -> void

          def type: (Symbol? value, ?nilable: bool) -> void

          def helper: (Symbol name, *untyped _args) { (?) [self: Options::GenericSettingsClass] -> untyped } -> void

          def after_set: () ?{ (option_type value, option_type old_value, Option::Precedence::Value precedence) [self: Options::GenericSettingsClass] -> void } -> void

          def resetter: () ?{ (option_type value) [self: Options::GenericSettingsClass] -> option_type } -> void

          def setter: () { (option_type new_value, option_type old_value) [self: Options::GenericSettingsClass] -> option_type } -> void

          def apply_options!: (?meta options) -> void

          def to_definition: () -> OptionDefinition

          def meta: () -> meta

          private

          def validate_options!: () -> void
        end

        private
      end
    end
  end
end
