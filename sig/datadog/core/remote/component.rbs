module Datadog
  module Core
    module Remote
      class Component
        BARRIER_TIMEOUT: Barrier::timeout_s

        attr_reader client: Datadog::Core::Remote::Client
        attr_reader worker: Datadog::Core::Remote::Worker
        attr_reader healthy: bool

        @barrier: Barrier

        def initialize: (untyped settings, Datadog::Core::Remote::Client::Capabilities capabilities, Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings agent_settings) -> void

        def start: -> void

        def started?: -> bool

        def barrier: (Symbol) -> Symbol

        def sync: () -> void

        def shutdown!: () -> void

        def self.build: (untyped settings, Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings agent_settings) -> Datadog::Core::Remote::Component?

        class Barrier
          type timeout_s = ::Integer | ::Float

          @once: bool
          @timeout: timeout_s?

          @mutex: ::Thread::Mutex
          @condition: ::Thread::ConditionVariable

          def initialize: (?timeout_s? timeout) -> void

          def wait_once: (?timeout_s? timeout) -> Symbol
          def lift: () -> void
        end
      end
    end
  end
end
