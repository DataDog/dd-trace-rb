module Datadog
  module Core
    module Transport
      module Config
        # Data transfer object for encoded traces
        class EncodedParcel
          include Datadog::Transport::Parcel

          def count: () -> untyped
        end

        # Config request
        class Request < Datadog::Transport::Request
        end

        # Config response
        module Response
          attr_reader roots: untyped

          attr_reader targets: untyped

          attr_reader target_files: untyped

          attr_reader client_configs: untyped

          attr_reader empty: bool

          def empty?: () -> bool
        end

        # Config transport
        class Transport
          attr_reader client: untyped

          attr_reader apis: untyped

          attr_reader default_api: untyped

          attr_reader current_api_id: untyped

          def initialize: (untyped apis, untyped default_api) -> void

          # ### there is only one transport! it's negotiation!
          def send_config: (untyped payload) -> untyped

          def current_api: () -> untyped
        end
      end
    end
  end
end
