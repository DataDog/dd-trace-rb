module Datadog
  module Core
    module Remote
      module Transport
        module Config
          # Data transfer object for encoded traces
          class EncodedParcel
            include Datadog::Core::Transport::Parcel

            def count: () -> untyped
          end

          # Config request
          class Request < Datadog::Core::Transport::Request
          end

          # Config response
          module Response
            attr_reader roots: untyped

            attr_reader targets: untyped

            attr_reader target_files: untyped

            attr_reader client_configs: untyped

            attr_reader empty: bool

            def empty?: () -> bool
          end

          # Config transport
          class Transport
            @apis: untyped

            @logger: untyped

            @client: untyped

            attr_reader client: untyped

            attr_reader apis: untyped

            attr_reader default_api: untyped

            attr_reader current_api_id: untyped

            attr_reader logger: untyped

            def initialize: (untyped apis, untyped default_api, ?logger: untyped) -> void
            def send_config: (untyped payload) -> untyped

            def current_api: () -> untyped
          end
        end
      end
    end
  end
end
