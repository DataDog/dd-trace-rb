module Datadog
  module Core
    class RateLimiter
      def allow?: (?::Integer size) -> void

      def effective_rate: () -> void
    end

    class TokenBucket < RateLimiter
      @rate: ::Float | ::Integer

      @max_tokens: ::Numeric

      @tokens: ::Numeric

      @total_messages: ::Integer

      @conforming_messages: ::Integer

      @prev_conforming_messages: ::Integer?

      @prev_total_messages: ::Integer?

      @current_window: ::Float?

      @last_refill: ::Numeric

      attr_reader rate: ::Float | ::Integer

      attr_reader max_tokens: ::Numeric

      def initialize: (::Float | ::Integer rate, ?::Numeric max_tokens) -> void

      def allow?: (?::Integer size) -> bool

      def effective_rate: () -> ::Float

      def current_window_rate: () -> ::Float

      def available_tokens: () -> ::Numeric

      private

      def refill_since_last_message: () -> void

      def refill_tokens: (::Numeric size) -> void

      def increment_total_count: () -> void

      def increment_conforming_count: () -> void

      def should_allow?: (?::Integer size) -> bool

      def update_rate_counts: (bool allowed) -> void
    end

    class UnlimitedLimiter < RateLimiter
      def allow?: (?::Integer _) -> true

      def effective_rate: () -> ::Float
    end
  end
end
