module Datadog
  module Core
    module Telemetry
      class Event
        class Log < Base
          @message: untyped

          @stack_trace: untyped
          @level: untyped

          @count: untyped

          LEVELS: { error: "ERROR", warn: "WARN" }

          LEVELS_STRING: untyped

          attr_reader message: untyped

          attr_reader level: untyped

          attr_reader stack_trace: untyped

          attr_reader count: untyped

          def type: () -> "logs"
          def initialize: (message: untyped, level: untyped, ?stack_trace: untyped?, ?count: ::Integer) -> void

          def payload: () -> { logs: ::Array[untyped] }
          def ==: (untyped other) -> untyped

          alias eql? ==

          def hash: () -> untyped
        end
      end
    end
  end
end
