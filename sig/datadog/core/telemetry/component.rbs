module Datadog
  module Core
    module Telemetry
      class Component
        @enabled: bool
        @stopped: bool
        @metrics_manager: Datadog::Core::Telemetry::MetricsManager
        @worker: Datadog::Core::Telemetry::Worker

        attr_reader enabled: bool

        include Core::Telemetry::Logging
        include Core::Telemetry::_Logging
        include Core::Utils::Forking

        def self.build: (untyped settings, Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings agent_settings, Datadog::Core::Logger logger) -> Component

        def initialize: (http_transport: Datadog::Core::Telemetry::Http::Transport, heartbeat_interval_seconds: Float, metrics_aggregation_interval_seconds: Float, dependency_collection: bool, ?enabled: bool, ?metrics_enabled: bool, shutdown_timeout_seconds: Float | Integer) -> void

        def disable!: () -> void

        def client_configuration_change!: (Enumerable[[String, Numeric | bool | String]] changes) -> void

        def emit_closing!: () -> void

        def stop!: () -> void

        def integrations_change!: () -> void

        def inc: (String namespace, String metric_name, Datadog::Core::Telemetry::Metric::input_value value, ?tags: Datadog::Core::Telemetry::Metric::tags_input, ?common: bool) -> void

        def dec: (String namespace, String metric_name, Datadog::Core::Telemetry::Metric::input_value value, ?tags: Datadog::Core::Telemetry::Metric::tags_input, ?common: bool) -> void

        def gauge: (String namespace, String metric_name, Datadog::Core::Telemetry::Metric::input_value value, ?tags: Datadog::Core::Telemetry::Metric::tags_input, ?common: bool) -> void

        def rate: (String namespace, String metric_name, Datadog::Core::Telemetry::Metric::input_value value, ?tags: Datadog::Core::Telemetry::Metric::tags_input, ?common: bool) -> void

        def distribution: (String namespace, String metric_name, Datadog::Core::Telemetry::Metric::input_value value, ?tags: Datadog::Core::Telemetry::Metric::tags_input, ?common: bool) -> void
      end
    end
  end
end
