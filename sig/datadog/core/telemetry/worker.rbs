module Datadog
  module Core
    module Telemetry
      class Worker
        include Core::Workers::Polling
        include Core::Workers::Async::Thread
        include Core::Workers::Async::Thread::PrependedMethods
        include Core::Workers::IntervalLoop
        include Core::Workers::Queue

        TELEMETRY_STARTED_ONCE: Datadog::Core::Utils::OnlyOnceSuccessful
        DEFAULT_BUFFER_MAX_SIZE: 1000

        @emitter: Emitter
        @sent_started_event: bool
        @shutdown_timeout: Integer
        @buffer_size: Integer
        @dependency_collection: bool

        def initialize: (?enabled: bool, heartbeat_interval_seconds: Numeric, emitter: Emitter, ?shutdown_timeout: Integer, ?buffer_size: Integer, dependency_collection: bool) -> void

        def start: () -> void

        def sent_started_event?: () -> bool

        def enqueue: (Event::Base event) -> void

        def dequeue: () -> Array[Event::Base]

        private

        def heartbeat!: () -> void

        def started!: () -> void

        def flush_events: (Array[Event::Base] events) -> void

        def send_event: (Event::Base event) -> Datadog::Core::Telemetry::Http::Adapters::Net::Response

        def disable_on_not_found!: (Datadog::Core::Telemetry::Http::Adapters::Net::Response response) -> void

        def buffer_klass: () -> untyped
      end
    end
  end
end
