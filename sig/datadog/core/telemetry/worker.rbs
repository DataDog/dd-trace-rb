module Datadog
  module Core
    module Telemetry
      class Worker
        include Core::Workers::Polling
        include Core::Workers::Async::Thread
        include Core::Workers::Async::Thread::PrependedMethods
        include Core::Workers::IntervalLoop
        include Core::Workers::Queue

        TELEMETRY_STARTED_ONCE: Datadog::Core::Utils::OnlyOnceSuccessful
        APP_STARTED_EVENT_RETRIES: 10
        DEFAULT_BUFFER_MAX_SIZE: 1000

        @emitter: Emitter
        @metrics_manager: MetricsManager
        @sent_started_event: bool
        @shutdown_timeout: Integer
        @buffer_size: Integer
        @dependency_collection: bool
        @ticks_per_heartbeat: Integer
        @current_ticks: Integer
        @logger: ::Logger
        
        attr_reader logger: ::Logger

        def initialize: (?enabled: bool, heartbeat_interval_seconds: Float, metrics_aggregation_interval_seconds: Float, emitter: Emitter, metrics_manager: MetricsManager, ?shutdown_timeout: Float | Integer, ?buffer_size: Integer, dependency_collection: bool, logger: ::Logger) -> void

        def start: () -> void

        def sent_started_event?: () -> bool

        def failed_to_start?: () -> bool

        def enqueue: (Event::Base event) -> void

        def dequeue: () -> Array[Event::Base]
	
	def flush: () -> (true | false)

        private

        def deduplicate_logs: (Array[Event::Base] events) -> Array[Event::Base]

        def heartbeat!: () -> void

        def started!: () -> void

        def flush_events: (Array[Event::Base] events) -> void

        def send_event: (Event::Base event) -> (Core::Transport::HTTP::Adapters::Net::Response | Core::Transport::InternalErrorResponse)

        def disable!: () -> void

        def disable_on_not_found!: ((Core::Transport::HTTP::Adapters::Net::Response | Core::Transport::InternalErrorResponse) response) -> void

        def buffer_klass: () -> untyped
      end
    end
  end
end
