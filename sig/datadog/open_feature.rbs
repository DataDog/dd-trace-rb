module Datadog
  module OpenFeature
    def self.enabled?: () -> bool

    def self.evaluator: () -> Evaluator?

    module Binding
      def self.supported?: () -> bool

      # Evaluates a feature flag and returns an Assignment or nil
      # @param configuration [Configuration] The feature flag configuration
      # @param flag_key [::String] The key identifying the flag to evaluate
      # @param evaluation_context [EvaluationContext] The evaluation context
      # @return [Assignment, nil] The assignment result or nil if no assignment
      def self.get_assignment: (Configuration configuration, ::String flag_key, EvaluationContext evaluation_context) -> (Assignment | nil)

      # Configuration containing feature flag definitions
      class Configuration
        # Creates a new Configuration from JSON
        # @param json_config [::String] JSON string containing flag configuration
        def initialize: (::String json_config) -> void
      end

      # Context for evaluating feature flags with optional attributes
      class EvaluationContext
        # Creates a new EvaluationContext with targeting key and optional attributes
        # @param targeting_key [::String] The key used for targeting decisions
        # @param attributes [::Hash[::String, ::String]] Optional hash of attributes for context
        def initialize: (::String targeting_key, ?::Hash[::String, ::String] attributes) -> void
      end

      # Result of feature flag evaluation
      class Assignment
        def initialize: () -> void
      end
    end
  end
end
