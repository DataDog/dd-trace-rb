name: Unit Test Template

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      # TODO: Provides concurrency control for each ruby version
      engine:
        required: true
        type: string
      version:
        required: true
        type: string
      alias:
        required: true
        type: string
    outputs:
      lockfile:
        description: "The lockfile artifact"
        value: ${{ jobs.batch.outputs.lockfile }}
      cache-key:
        description: "The cache key for bundle"
        value: ${{ jobs.batch.outputs.cache-key }}

jobs:
  batch:
    runs-on: ubuntu-24.04
    name: batch
    outputs:
      batches: "${{ steps.set-batches.outputs.batches }}"
      misc: "${{ steps.set-batches.outputs.misc }}"
      cache-key: "${{ steps.bundle-cache.outputs.cache-key }}"
      lockfile: "${{ steps.bundle-cache.outputs.lockfile }}"
    container:
      image: ghcr.io/datadog/images-rb/engines/${{ inputs.engine }}:${{ inputs.version }}
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Prepare bundle cache
      id: bundle-cache
      uses: ./.github/actions/bundle-cache

    - id: set-batches
      name: Distribute tasks into batches
      run: |
        data=$(bundle exec rake github:generate_batches)
        echo "$data" | ruby -rjson -e 'puts JSON.pretty_generate(JSON.parse(STDIN.read))'

        # Extract each key and set it as a separate output
        batches_data=$(echo "$data" | ruby -rjson -e 'puts JSON.parse(STDIN.read)["batches"].to_json')
        misc_data=$(echo "$data" | ruby -rjson -e 'puts JSON.parse(STDIN.read)["misc"].to_json')

        echo "batches=$batches_data" >> "$GITHUB_OUTPUT"
        echo "misc=$misc_data" >> "$GITHUB_OUTPUT"
    - name: Generate batch summary
      run: bundle exec rake github:generate_batch_summary
      env:
        batches_json: "${{ steps.set-batches.outputs.batches }}"

  # `Initialize containers` step becomes quite heavily when many services are used.
  #
  # The job can failed with timeout because it takes a long time pulling the image or waiting for the service to be ready).
  #
  # `build-test-standard` job is used to run most of our tasks and configured with the following services:
  #   - mysql
  #   - postgres
  #   - redis
  #
  # `build-test-misc` job is extracted to run specific tasks that requires the following services:
  #   - elasticsearch
  #   - memcached
  #   - mongodb
  #   - opensearch
  #   - presto
  #
  #  Benefit of this optimization:
  #  - Unnecessary services are not started
  #  - Reduce the overhead for pulling images
  #  - Improve reliability for starting dependent services
  #
  # In the future, we could consider to extract jobs to run database dependent tasks to optimize the workflow.
  build-test-standard:
    needs:
    - batch
    runs-on: ubuntu-24.04
    name: build & test (standard) [${{ matrix.batch }}]
    timeout-minutes: 30
    env:
      BATCHED_TASKS: "${{ toJSON(matrix.tasks) }}"
    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJson(needs.batch.outputs.batches).include }}"
    container:
      image: ghcr.io/datadog/images-rb/engines/${{ inputs.engine }}:${{ inputs.version }}
      env:
        DD_INSTRUMENTATION_TELEMETRY_ENABLED: 'false'
        DD_REMOTE_CONFIGURATION_ENABLED: 'false'
        TEST_POSTGRES_HOST: postgres
        TEST_REDIS_HOST: redis
        TEST_MYSQL_HOST: mysql
        DD_AGENT_HOST: agent
        DD_TRACE_AGENT_PORT: '9126'
        DATADOG_GEM_CI: 'true'
        TEST_DATADOG_INTEGRATION: '1'
        JRUBY_OPTS: "--dev" # Faster JVM startup: https://github.com/jruby/jruby/wiki/Improving-startup-time#use-the---dev-flag
    services:
      agent:
        image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.18.0
        env:
          LOG_LEVEL: DEBUG
          TRACE_LANGUAGE: ruby
          PORT: '9126'
          DD_POOL_TRACE_CHECK_FAILURES: 'true'
          DD_DISABLE_ERROR_RESPONSES: 'true'
          ENABLED_CHECKS: trace_content_length,trace_stall,meta_tracer_version_header,trace_count_header,trace_peer_service,trace_dd_service
      mysql:
        image: ghcr.io/datadog/images-rb/services/mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: mysql
          MYSQL_USER: mysql
      postgres:
        image: ghcr.io/datadog/images-rb/services/postgres:9.6
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      redis:
        image: ghcr.io/datadog/images-rb/services/redis:6.2
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
    - name: Restore bundle cache
      uses: ./.github/actions/bundle-restore
      with:
        lockfile: ${{ needs.batch.outputs.lockfile }}
        cache-key: ${{ needs.batch.outputs.cache-key }}
    - name: Build & Test
      uses: ./.github/actions/build-test
      with:
        alias: ${{ inputs.alias }}
        container-id: "standard-${{ matrix.batch }}"

  build-test-misc:
    needs:
    - batch
    runs-on: ubuntu-24.04
    name: build & test (misc) [${{ matrix.batch }}]
    timeout-minutes: 30
    env:
      BATCHED_TASKS: "${{ toJSON(matrix.tasks) }}"
    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJson(needs.batch.outputs.misc).include }}"
    container:
      image: ghcr.io/datadog/images-rb/engines/${{ inputs.engine }}:${{ inputs.version }}
      env:
        DD_INSTRUMENTATION_TELEMETRY_ENABLED: 'false'
        DD_REMOTE_CONFIGURATION_ENABLED: 'false'
        TEST_ELASTICSEARCH_HOST: elasticsearch
        TEST_MEMCACHED_HOST: memcached
        TEST_MONGODB_HOST: mongodb
        TEST_OPENSEARCH_HOST: opensearch
        TEST_OPENSEARCH_PORT: '9200'
        TEST_PRESTO_HOST: presto
        DD_AGENT_HOST: agent
        DD_TRACE_AGENT_PORT: '9126'
        DATADOG_GEM_CI: 'true'
        TEST_DATADOG_INTEGRATION: '1'
        JRUBY_OPTS: "--dev" # Faster JVM startup: https://github.com/jruby/jruby/wiki/Improving-startup-time#use-the---dev-flag
    services:
      agent:
        image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.18.0
        env:
          LOG_LEVEL: DEBUG
          TRACE_LANGUAGE: ruby
          PORT: '9126'
          DD_POOL_TRACE_CHECK_FAILURES: 'true'
          DD_DISABLE_ERROR_RESPONSES: 'true'
          ENABLED_CHECKS: trace_content_length,trace_stall,meta_tracer_version_header,trace_count_header,trace_peer_service,trace_dd_service
      elasticsearch:
        image: ghcr.io/datadog/images-rb/services/elasticsearch:8.1.3
        env:
          discovery.type: single-node
          xpack.security.enabled: 'false'
          ES_JAVA_OPTS: "-Xms750m -Xmx750m"
      memcached:
        image: ghcr.io/datadog/images-rb/services/memcached:1.5-alpine
      mongodb:
        image: ghcr.io/datadog/images-rb/services/mongo:3.6
      opensearch:
        image: ghcr.io/datadog/images-rb/services/opensearchproject/opensearch:2.8.0
        env:
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: 'true'
          DISABLE_PERFORMANCE_ANALYZER_AGENT_CLI: 'true'
          cluster.routing.allocation.disk.watermark.low: 3gb
          cluster.routing.allocation.disk.watermark.high: 2gb
          cluster.routing.allocation.disk.watermark.flood_stage: 1gb
          cluster.routing.allocation.disk.threshold_enabled: 'false'
      presto:
        image: ghcr.io/datadog/images-rb/services/starburstdata/presto:332-e.9
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
    - name: Restore bundle cache
      uses: ./.github/actions/bundle-restore
      with:
        lockfile: ${{ needs.batch.outputs.lockfile }}
        cache-key: ${{ needs.batch.outputs.cache-key }}
    - name: Build & Test
      uses: ./.github/actions/build-test
      with:
        alias: ${{ inputs.alias }}
        container-id: "misc-${{ matrix.batch }}"
